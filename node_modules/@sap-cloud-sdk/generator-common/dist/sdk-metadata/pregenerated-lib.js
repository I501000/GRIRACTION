"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPregeneratedLibrary = exports.getTimeStamp = exports.getRepositoryLink = exports.getInstallationSnippet = exports.getLatestVersionOfNpmPackage = exports.isPublishedNpmPackage = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const axios_1 = __importDefault(require("axios"));
/**
 * @internal
 */
async function isPublishedNpmPackage(npmPackageName) {
    try {
        await (0, util_1.checkUrlExists)(`http://registry.npmjs.org/${npmPackageName}`);
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.isPublishedNpmPackage = isPublishedNpmPackage;
/**
 * @internal
 */
async function getLatestVersionOfNpmPackage(npmPackageName) {
    const response = await axios_1.default.request({
        url: `http://registry.npmjs.org/${npmPackageName}/latest`,
        method: 'GET'
    });
    return response.data.version;
}
exports.getLatestVersionOfNpmPackage = getLatestVersionOfNpmPackage;
/**
 * @internal
 */
function getInstallationSnippet(npmPackageName) {
    return {
        header: 'Installation',
        instructions: `npm i ${npmPackageName}:latest`,
        text: 'Add this client library as a dependency to your JavaScript project by running the npm command below in the root folder of your project. For more details take a look at our "Getting Started with the SAP Cloud SDK for JavaScript" guide in the "Helpful Links" menu.'
    };
}
exports.getInstallationSnippet = getInstallationSnippet;
/**
 * @internal
 */
function getRepositoryLink(npmPackageName) {
    return `https://www.npmjs.com/package/${npmPackageName}`;
}
exports.getRepositoryLink = getRepositoryLink;
/**
 * @internal
 */
function getTimeStamp() {
    return `/Date(${Date.now()})/`;
}
exports.getTimeStamp = getTimeStamp;
/**
 * @internal
 */
async function getPregeneratedLibrary(description, npmPackageName) {
    if (await isPublishedNpmPackage(npmPackageName)) {
        return {
            repository: 'npm',
            dependencyName: npmPackageName,
            installLibrarySteps: getInstallationSnippet(npmPackageName),
            repositoryLink: getRepositoryLink(npmPackageName),
            compatibilityNotes: '',
            description,
            generatedAt: getTimeStamp(),
            version: await getLatestVersionOfNpmPackage(npmPackageName)
        };
    }
}
exports.getPregeneratedLibrary = getPregeneratedLibrary;
//# sourceMappingURL=pregenerated-lib.js.map