"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getActionFunctionParams = exports.getFunctionWithMinParameters = exports.getFunctionWithoutParameters = exports.getActionFunctionImport = exports.getShortestNameEntity = exports.getODataEntity = void 0;
const internal_1 = require("@sap-cloud-sdk/generator-common/internal");
/**
 * @internal
 */
function getODataEntity(serviceName, vdmEntities) {
    return ((0, internal_1.getLevenshteinClosest)(serviceName, vdmEntities, x => x.className) ||
        getShortestNameEntity(vdmEntities));
}
exports.getODataEntity = getODataEntity;
/**
 * @internal
 */
function getShortestNameEntity(vdmEntities) {
    // If no closest entity found, return the entity with shortest name
    return vdmEntities.sort((a, b) => a.className.length < b.className.length ? -1 : 1)[0];
}
exports.getShortestNameEntity = getShortestNameEntity;
/**
 * @internal
 */
function getActionFunctionImport(serviceName, actionFunctionImports) {
    if (actionFunctionImports.length === 1) {
        return actionFunctionImports[0];
    }
    return ((0, internal_1.getLevenshteinClosest)(serviceName, actionFunctionImports, x => x.name) ||
        getFunctionWithoutParameters(actionFunctionImports) ||
        getFunctionWithMinParameters(actionFunctionImports));
}
exports.getActionFunctionImport = getActionFunctionImport;
/**
 * @internal
 */
function getFunctionWithoutParameters(actionFunctionImports) {
    return actionFunctionImports.find(func => { var _a; return ((_a = func.parameters) === null || _a === void 0 ? void 0 : _a.length) === 0; });
}
exports.getFunctionWithoutParameters = getFunctionWithoutParameters;
/**
 * Sorts and gets a function import having minimum input parameters.
 * @param actionFunctionImports - function or action imports array
 * @returns Import containing minimum input paramters
 * @internal
 */
function getFunctionWithMinParameters(actionFunctionImports) {
    const getFunctions = actionFunctionImports.filter(func => { var _a; return ((_a = func.httpMethod) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'get'; });
    if (getFunctions.length > 0) {
        actionFunctionImports = getFunctions;
    }
    const sortedfunctions = actionFunctionImports.sort((funcA, funcB) => { var _a, _b; return ((_a = funcA.parameters) === null || _a === void 0 ? void 0 : _a.length) < ((_b = funcB.parameters) === null || _b === void 0 ? void 0 : _b.length) ? -1 : 1; });
    return sortedfunctions[0];
}
exports.getFunctionWithMinParameters = getFunctionWithMinParameters;
/**
 * @internal
 */
function getActionFunctionParams(parameters) {
    const paramString = parameters
        .slice(0, 2)
        .reduce((cumulator, currentParam) => `${cumulator}, ${currentParam.parameterName}: '${currentParam.parameterName}'`, '');
    return `{${paramString.substring(1)}${parameters.length > 2 ? ', ...' : ''} }`;
}
exports.getActionFunctionParams = getActionFunctionParams;
//# sourceMappingURL=code-sample-util.js.map