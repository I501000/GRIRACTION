"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.actionImportCodeSample = exports.functionImportCodeSample = exports.genericEntityCodeSample = exports.entityCodeSample = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const internal_1 = require("@sap-cloud-sdk/generator-common/internal");
const voca_1 = __importDefault(require("voca"));
const service_1 = require("../generator-without-ts-morph/service");
const code_sample_util_1 = require("./code-sample-util");
const instructionsText = 'To consume the service via the pregenerated typed client library run the code snippet below. For more details about OData client libraries chose "OData Consumption Manual" from the "Helpful Links" menu.';
/**
 * @internal
 */
function entityCodeSample(entityName, serviceName, packageName) {
    return {
        text: instructionsText,
        instructions: (0, util_1.codeBlock) `
import { ${voca_1.default.decapitalize(serviceName)} } from '${packageName}';

const { ${(0, service_1.getApiName)(entityName)} } = ${voca_1.default.decapitalize(serviceName)}();
const resultPromise = ${(0, service_1.getApiName)(entityName)}.requestBuilder().getAll().top(5).execute({ destinationName: 'myDestinationName' });

`
    };
}
exports.entityCodeSample = entityCodeSample;
/**
 * @internal
 */
function genericEntityCodeSample() {
    return {
        ...entityCodeSample('BusinessPartner', 'BusinessPartnerService', '@sap/cloud-sdk-vdm-business-partner-service'),
        header: internal_1.usageHeaderText
    };
}
exports.genericEntityCodeSample = genericEntityCodeSample;
/**
 * @internal
 */
function functionImportCodeSample(functionImport, packageName) {
    return importsCodeSample(functionImport, packageName);
}
exports.functionImportCodeSample = functionImportCodeSample;
/**
 * @internal
 */
function actionImportCodeSample(actionImport, packageName) {
    return importsCodeSample(actionImport, packageName);
}
exports.actionImportCodeSample = actionImportCodeSample;
function importsCodeSample(actionFunctionImport, packageName) {
    return {
        text: instructionsText,
        instructions: (0, util_1.codeBlock) `
import { ${actionFunctionImport.name}${actionFunctionImport.parametersTypeName
            ? `, ${actionFunctionImport.parametersTypeName}`
            : ''} } from '${packageName}';

${getParameterCodeSample(actionFunctionImport)}
const resultPromise = ${actionFunctionImport.name}(${actionFunctionImport.parametersTypeName ? 'parameter' : ''}).execute({ destinationName: 'myDestinationName' });
`
    };
}
function getParameterCodeSample(functionImport) {
    if (functionImport.parameters) {
        return `const parameter: ${functionImport.parametersTypeName} = ${(0, code_sample_util_1.getActionFunctionParams)(functionImport.parameters)};
    `;
    }
    return '';
}
//# sourceMappingURL=code-samples.js.map