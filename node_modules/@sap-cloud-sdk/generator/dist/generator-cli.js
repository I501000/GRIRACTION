#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCmdArgs = void 0;
const path_1 = require("path");
const util_1 = require("@sap-cloud-sdk/util");
const fs_extra_1 = require("fs-extra");
const yargs_1 = __importDefault(require("yargs"));
const generator_1 = require("./generator");
const generator_options_1 = require("./generator-options");
const logger = (0, util_1.createLogger)({
    package: 'generator',
    messageContext: 'generator-cli'
});
logger.info('Parsing args...');
(0, generator_1.generate)(parseCmdArgs())
    .then(() => logger.info('Generation of services finished successfully.'))
    .catch(err => {
    logger.error(new util_1.ErrorWithCause('Generation of services failed.', err));
    process.exit(1);
});
/**
 * @internal
 */
function parseCmdArgs() {
    const command = yargs_1.default.command('$0', 'OData Client Code Generator for OData v2 and v4. Generates TypeScript code from `.edmx`/`.xml` files for usage with the SAP Cloud SDK for JavaScript.');
    for (const key in generator_options_1.generatorOptionsCli) {
        command.option(key, generator_options_1.generatorOptionsCli[key]);
    }
    return command
        .config('config', 'Instead of specifying the options on the command line, you can also provide a path to single .json file holding these options. ' +
        'The file must be a valid .json file where the keys correspond to the command line flags without dashes. Paths will be interpreted relative to the config file.', configPath => {
        const file = (0, fs_extra_1.readFileSync)(configPath, 'utf-8');
        const pathLikeKeys = ['inputDir', 'outputDir', 'serviceMapping'];
        return pathLikeKeys.reduce((json, pathLikeKey) => typeof json[pathLikeKey] === 'undefined'
            ? json
            : {
                ...json,
                [pathLikeKey]: (0, path_1.resolve)((0, path_1.dirname)(configPath), json[pathLikeKey])
            }, JSON.parse(file));
    })
        .alias('config', 'c')
        .alias('version', 'v')
        .alias('help', 'h')
        .strict(true)
        .recommendCommands().argv;
}
exports.parseCmdArgs = parseCmdArgs;
//# sourceMappingURL=generator-cli.js.map