"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importDeclarationsAction = exports.importDeclarationsFunction = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const ts_morph_1 = require("ts-morph");
const voca_1 = __importDefault(require("voca"));
const vdm_types_1 = require("../vdm-types");
const imports_1 = require("../imports");
const common_1 = require("../edmx-to-vdm/common");
const response_transformer_function_1 = require("./response-transformer-function");
function actionFunctionImportDeclarations(returnTypes, parameters, additionalImports, { oDataVersion, className }) {
    const responseTransformerFunctionCommon = returnTypes.find(returnType => (0, common_1.isEntityNotDeserializable)(returnType))
        ? ['throwErrorWhenReturnTypeIsUnionType']
        : [];
    const responseTransformerFunctionVersionDependent = returnTypes
        .filter(returnType => !(0, common_1.isEntityNotDeserializable)(returnType))
        .map(returnType => (0, response_transformer_function_1.responseTransformerFunctionName)(returnType));
    const [version, common] = additionalImports.reduce(([v, c], current) => {
        if (current.version === 'common') {
            return [v, [...c, current.name]];
        }
        return [[...v, current.name], c];
    }, [[], []]);
    return [
        ...(0, imports_1.externalImportDeclarations)(parameters),
        (0, imports_1.odataImportDeclaration)([
            ...edmRelatedImports(returnTypes),
            ...complexTypeRelatedImports(returnTypes),
            ...version,
            ...responseTransformerFunctionVersionDependent,
            'DeSerializers',
            'DefaultDeSerializers',
            'defaultDeSerializers',
            ...(0, imports_1.propertyTypeImportNames)(parameters),
            ...common,
            ...responseTransformerFunctionCommon
        ], oDataVersion),
        {
            kind: ts_morph_1.StructureKind.ImportDeclaration,
            namedImports: [voca_1.default.decapitalize(className)],
            moduleSpecifier: './service'
        },
        ...returnTypeImports(returnTypes)
    ];
}
function complexTypeRelatedImports(returnTypes) {
    return returnTypes.some(returnType => returnType.returnTypeCategory === vdm_types_1.VdmReturnTypeCategory.COMPLEX_TYPE)
        ? ['entityDeserializer']
        : [];
}
function edmRelatedImports(returnTypes) {
    return returnTypes.some(returnType => returnType.returnTypeCategory === vdm_types_1.VdmReturnTypeCategory.EDM_TYPE)
        ? ['edmToTs']
        : [];
}
function returnTypeImports(returnTypes) {
    return (0, imports_1.mergeImportDeclarations)(returnTypes
        .filter(returnType => returnType.returnTypeCategory !== vdm_types_1.VdmReturnTypeCategory.EDM_TYPE &&
        returnType.returnTypeCategory !== vdm_types_1.VdmReturnTypeCategory.VOID &&
        returnType.returnTypeCategory !== vdm_types_1.VdmReturnTypeCategory.NEVER)
        .reduce((imports, returnType) => [...imports, ...returnTypeImport(returnType)], []));
}
function returnTypeImport(returnType) {
    const typeImports = [
        {
            kind: ts_morph_1.StructureKind.ImportDeclaration,
            namedImports: [returnType.returnType],
            moduleSpecifier: `./${returnType.returnType}`
        }
    ];
    if (returnType.returnTypeCategory === vdm_types_1.VdmReturnTypeCategory.ENTITY) {
        return [
            ...typeImports,
            {
                kind: ts_morph_1.StructureKind.ImportDeclaration,
                namedImports: [`${returnType.returnType}Api`],
                moduleSpecifier: `./${returnType.returnType}Api`
            }
        ];
    }
    return typeImports;
}
/**
 * @internal
 */
function importDeclarationsFunction(service) {
    if (!service.actionImports) {
        return [];
    }
    const actionImportPayloadElements = (0, util_1.flat)(service.actionImports.map(actionImport => actionImport.parameters));
    const returnTypes = service.actionImports.map(actionImport => actionImport.returnType);
    return actionFunctionImportDeclarations(returnTypes, actionImportPayloadElements, [
        { name: 'ActionImportRequestBuilder', version: service.oDataVersion },
        { name: 'ActionImportParameter', version: service.oDataVersion }
    ], service);
}
exports.importDeclarationsFunction = importDeclarationsFunction;
/**
 * @internal
 */
function importDeclarationsAction(service) {
    const functionImportParameters = (0, util_1.flat)(service.functionImports.map(functionImport => functionImport.parameters));
    const returnTypes = service.functionImports.map(functionImport => functionImport.returnType);
    return actionFunctionImportDeclarations(returnTypes, functionImportParameters, [
        { name: 'FunctionImportRequestBuilder', version: service.oDataVersion },
        { name: 'DeSerializers', version: service.oDataVersion },
        { name: 'FunctionImportParameter', version: 'common' }
    ], service);
}
exports.importDeclarationsAction = importDeclarationsAction;
//# sourceMappingURL=import.js.map