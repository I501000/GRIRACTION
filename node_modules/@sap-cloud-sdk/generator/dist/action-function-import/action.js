"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.actionImportFunction = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const ts_morph_1 = require("ts-morph");
const common_1 = require("../edmx-to-vdm/common");
const request_builder_arguments_1 = require("./request-builder-arguments");
const function_1 = require("./function");
const return_type_1 = require("./return-type");
const parameterName = 'parameters';
/**
 * @internal
 */
function actionImportFunction(actionImport, service) {
    const returnType = (0, return_type_1.actionImportReturnType)(actionImport);
    return {
        kind: ts_morph_1.StructureKind.Function,
        name: `${actionImport.name}<DeSerializersT extends DeSerializers = DefaultDeSerializers>`,
        isExported: true,
        parameters: [
            {
                name: parameterName,
                type: `${actionImport.parametersTypeName}<DeSerializersT>`
            },
            {
                name: 'deSerializers',
                type: 'DeSerializersT',
                initializer: 'defaultDeSerializers as any'
            }
        ],
        returnType,
        statements: getActionImportStatements(actionImport, service),
        docs: [
            [
                getDocDescription(actionImport),
                '@param parameters - Object containing all parameters for the action import.',
                '@returns A request builder that allows to overwrite some of the values and execute the resulting request.'
            ].join(util_1.unixEOL)
        ]
    };
}
exports.actionImportFunction = actionImportFunction;
function getDocDescription(actionImport) {
    return `${actionImport.description} ${(0, common_1.isEntityNotDeserializable)(actionImport.returnType)
        ? function_1.additionalDocForEntityNotDeserializable
        : ''}${util_1.unixEOL}`;
}
function getActionImportStatements(actionImport, service) {
    const context = actionImport.parameters
        ? actionImport.parameters.reduce((cumulator, currentParameters) => {
            if (cumulator !== `const params = {${util_1.unixEOL}`) {
                cumulator += `,${util_1.unixEOL}`;
            }
            cumulator += `${currentParameters.parameterName}: new ActionImportParameter('${currentParameters.originalName}', '${currentParameters.edmType}', ${parameterName}.${currentParameters.parameterName})`;
            return cumulator;
        }, `const params = {${util_1.unixEOL}`) + `${util_1.unixEOL}}`
        : '{}';
    const parameters = (0, request_builder_arguments_1.getRequestBuilderArgumentsBase)(actionImport, service);
    const returnStatement = `return new ActionImportRequestBuilder(${parameters.join(', ')});`;
    return context + util_1.unixEOL + util_1.unixEOL + returnStatement;
}
//# sourceMappingURL=action.js.map