"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.additionalDocForEntityNotDeserializable = exports.functionImportFunction = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const ts_morph_1 = require("ts-morph");
const common_1 = require("../edmx-to-vdm/common");
const request_builder_arguments_1 = require("./request-builder-arguments");
const return_type_1 = require("./return-type");
const parameterName = 'parameters';
/**
 * @internal
 */
function functionImportFunction(functionImport, service) {
    const returnType = (0, return_type_1.functionImportReturnType)(functionImport);
    return {
        kind: ts_morph_1.StructureKind.Function,
        name: `${functionImport.name}<DeSerializersT extends DeSerializers = DefaultDeSerializers>`,
        isExported: true,
        parameters: [
            {
                name: parameterName,
                type: `${functionImport.parametersTypeName}<DeSerializersT>`
            },
            {
                name: 'deSerializers',
                type: 'DeSerializersT',
                initializer: 'defaultDeSerializers as any'
            }
        ],
        returnType,
        statements: getFunctionImportStatements(functionImport, service),
        docs: [
            [
                getDocDescription(functionImport),
                '@param parameters - Object containing all parameters for the function import.',
                '@returns A request builder that allows to overwrite some of the values and execute the resulting request.'
            ].join(util_1.unixEOL)
        ]
    };
}
exports.functionImportFunction = functionImportFunction;
/**
 * @internal
 */
exports.additionalDocForEntityNotDeserializable = "The 'execute' method does not exist when using this function/action import. Please use the 'executeRaw' for getting the raw response.";
function getDocDescription(functionImport) {
    return `${functionImport.description} ${(0, common_1.isEntityNotDeserializable)(functionImport.returnType)
        ? exports.additionalDocForEntityNotDeserializable
        : ''}`;
}
function getFunctionImportStatements(functionImport, service) {
    const paramsLines = (functionImport.parameters || []).map(param => `${param.parameterName}: new FunctionImportParameter('${param.originalName}', '${param.edmType}', ${parameterName}.${param.parameterName})`);
    const params = `const params = {\n${paramsLines.join(',\n')}\n};`;
    let parameters = (0, request_builder_arguments_1.getRequestBuilderArgumentsBase)(functionImport, service);
    if (service.oDataVersion === 'v2') {
        parameters = [`'${functionImport.httpMethod}'`, ...parameters];
    }
    const returnStatement = `return new FunctionImportRequestBuilder(${parameters.join(', ')});`;
    return [params, '\n', returnStatement].join('\n');
}
//# sourceMappingURL=function.js.map