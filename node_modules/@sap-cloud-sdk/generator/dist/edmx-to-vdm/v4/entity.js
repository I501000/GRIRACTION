"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateEntitiesV4 = exports.joinEntityTypes = void 0;
const common_1 = require("../common");
const v4_1 = require("../../edmx-parser/v4");
const edmx_to_vdm_util_1 = require("../edmx-to-vdm-util");
/**
 * @internal
 */
function joinEntityTypes(entityType, baseType) {
    // TODO: only join properties / nav properties of the respective type
    return {
        ...entityType,
        Key: {
            PropertyRef: [...entityType.Key.PropertyRef, ...baseType.Key.PropertyRef]
        },
        Property: [...entityType.Property, ...baseType.Property],
        NavigationProperty: [
            ...entityType.NavigationProperty,
            ...baseType.NavigationProperty
        ]
    };
}
exports.joinEntityTypes = joinEntityTypes;
/**
 * @internal
 */
function generateEntitiesV4(serviceMetadata, complexTypes, enumTypes, formatter) {
    const entitySets = (0, v4_1.parseEntitySetsV4)(serviceMetadata.edmx.root);
    const entityTypes = (0, v4_1.parseEntityType)(serviceMetadata.edmx.root);
    const entitiesMetadata = (0, common_1.joinEntityMetadata)(entitySets, entityTypes, serviceMetadata.swagger);
    const classNames = (0, common_1.createEntityClassNames)(entitiesMetadata, formatter);
    return entitiesMetadata.map(entityMetadata => ({
        ...(0, common_1.transformEntityBase)(entityMetadata, classNames, complexTypes, enumTypes, formatter),
        navigationProperties: navigationProperties(entityMetadata.entityType, entityMetadata.entitySet, classNames, formatter)
    }));
}
exports.generateEntitiesV4 = generateEntitiesV4;
function navigationProperties(entityType, entitySet, classNames, formatter) {
    return entitySet.NavigationPropertyBinding.filter(navBinding => !isDerivedNavBindingPath(navBinding.Path)).map(navBinding => {
        const navProp = entityType.NavigationProperty.find(n => n.Name === navBinding.Path);
        if (!navProp) {
            throw new Error(`Could not find navigation property ${navBinding.Path} in entity type ${entityType.Name}.`);
        }
        const isCollection = (0, edmx_to_vdm_util_1.isCollectionType)(navProp.Type);
        return {
            ...(0, common_1.navigationPropertyBase)(navProp.Name, entitySet.Name, formatter),
            from: entityType.Name,
            to: navBinding.Target,
            toEntityClassName: classNames[navBinding.Target],
            isCollection
        };
    });
}
// TODO: This should be removed once derived types are considered.
function isDerivedNavBindingPath(path) {
    return path.includes('/');
}
//# sourceMappingURL=entity.js.map