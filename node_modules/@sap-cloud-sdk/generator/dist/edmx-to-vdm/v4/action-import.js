"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateActionImportsV4 = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const swagger_parser_1 = require("../../swagger-parser");
const v4_1 = require("../../edmx-parser/v4");
const common_1 = require("../common");
const edmx_to_vdm_util_1 = require("../edmx-to-vdm-util");
const action_function_util_1 = require("./action-function-util");
const logger = (0, util_1.createLogger)({
    package: 'generator',
    messageContext: 'action-import'
});
function findActionForActionImport(actions, actionImport) {
    return (0, action_function_util_1.findActionFunctionByImportName)(actions, actionImport.Action);
}
const extractResponse = (response) => `${response}.value`;
function joinActionImportData(actionImports, actions) {
    const actionImportsWithoutActions = [];
    const joinedActionImportData = actionImports.reduce((joined, actionImport) => {
        const edmxAction = findActionForActionImport(actions, actionImport);
        if (edmxAction) {
            return [
                ...joined,
                {
                    actionImport,
                    action: edmxAction
                }
            ];
        }
        actionImportsWithoutActions.push(actionImport);
        return joined;
    }, []);
    if (actionImportsWithoutActions.length) {
        logger.warn(`Could not find actions referenced by the following action imports. Skipping code generation: 
${actionImportsWithoutActions
            .map(f => `${f.Name} => ${f.Action}`)
            .join(`, ${util_1.unixEOL}`)}`);
    }
    return joinedActionImportData;
}
/**
 * @internal
 */
function generateActionImportsV4(serviceMetadata, serviceName, entities, complexTypes, formatter) {
    const actions = (0, v4_1.parseActions)(serviceMetadata.edmx.root);
    const actionImports = (0, v4_1.parseActionImport)(serviceMetadata.edmx.root);
    const joinedFunctionData = joinActionImportData(actionImports, actions);
    return (joinedFunctionData
        // TODO 1571 remove when supporting entity type as parameter
        .filter(({ action: edmxAction }) => !(0, edmx_to_vdm_util_1.hasUnsupportedParameterTypes)(edmxAction))
        .map(({ actionImport, action: edmxAction }) => {
        const httpMethod = 'post';
        const swaggerDefinition = (0, swagger_parser_1.swaggerDefinitionForFunctionImport)(actionImport.Name, httpMethod, serviceMetadata.swagger);
        return {
            ...(0, common_1.transformActionImportBase)(actionImport, edmxAction.Parameter || [], swaggerDefinition, formatter),
            httpMethod,
            returnType: (0, common_1.parseActionImportReturnTypes)(edmxAction.ReturnType, entities, complexTypes, extractResponse, serviceName)
        };
    }));
}
exports.generateActionImportsV4 = generateActionImportsV4;
//# sourceMappingURL=action-import.js.map