"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFunctionImportsV4 = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const common_1 = require("../common");
const swagger_parser_1 = require("../../swagger-parser");
const v4_1 = require("../../edmx-parser/v4");
const edmx_to_vdm_util_1 = require("../edmx-to-vdm-util");
const action_function_util_1 = require("./action-function-util");
const logger = (0, util_1.createLogger)({
    package: 'generator',
    messageContext: 'function-import'
});
function findFunctionForFunctionImport(functions, functionImport) {
    return (0, action_function_util_1.findActionFunctionByImportName)(functions, functionImport.Function);
}
const extractResponse = (response) => `${response}.value`;
function joinFunctionImportData(functionImports, functions) {
    const functionImportsWithoutFunctions = [];
    const joinedFunctionImportData = functionImports.reduce((joined, functionImport) => {
        const edmxFunction = findFunctionForFunctionImport(functions, functionImport);
        if (edmxFunction) {
            return [
                ...joined,
                {
                    functionImport,
                    function: edmxFunction
                }
            ];
        }
        functionImportsWithoutFunctions.push(functionImport);
        return joined;
    }, []);
    if (functionImportsWithoutFunctions.length) {
        logger.warn(`Could not find functions referenced by the following function imports. Skipping code generation: ${functionImportsWithoutFunctions
            .map(f => `${f.Name} => ${f.Function}`)
            .join(`, ${util_1.unixEOL}`)}`);
    }
    return joinedFunctionImportData;
}
/**
 * @internal
 */
function generateFunctionImportsV4(serviceMetadata, serviceName, entities, complexTypes, formatter) {
    const functions = (0, v4_1.parseFunctions)(serviceMetadata.edmx.root);
    const functionImports = (0, v4_1.parseFunctionImportsV4)(serviceMetadata.edmx.root);
    const joinedFunctionData = joinFunctionImportData(functionImports, functions);
    return (joinedFunctionData
        // TODO 1571 remove when supporting entity type as parameter
        .filter(({ function: edmxFunction }) => !(0, edmx_to_vdm_util_1.hasUnsupportedParameterTypes)(edmxFunction))
        .map(({ functionImport, function: edmxFunction }) => {
        const httpMethod = 'get';
        const swaggerDefinition = (0, swagger_parser_1.swaggerDefinitionForFunctionImport)(functionImport.Name, httpMethod, serviceMetadata.swagger);
        return {
            ...(0, common_1.transformFunctionImportBase)(functionImport, edmxFunction.Parameter, swaggerDefinition, formatter),
            httpMethod,
            returnType: (0, common_1.parseFunctionImportReturnTypes)(edmxFunction.ReturnType, entities, complexTypes, extractResponse, serviceName)
        };
    }));
}
exports.generateFunctionImportsV4 = generateFunctionImportsV4;
//# sourceMappingURL=function-import.js.map