"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFunctionImportsV2 = void 0;
const common_1 = require("../common");
const swagger_parser_1 = require("../../swagger-parser");
const v2_1 = require("../../edmx-parser/v2");
const edmx_to_vdm_util_1 = require("../edmx-to-vdm-util");
const extractResponse = (functionName) => (response) => `${response}.${functionName}`;
/**
 * @internal
 */
function generateFunctionImportsV2(serviceMetadata, serviceName, entities, complexTypes, formatter) {
    const edmxFunctionImports = (0, v2_1.parseFunctionImportsV2)(serviceMetadata.edmx.root);
    return (edmxFunctionImports
        // TODO 1571 remove when supporting entity type as parameter
        .filter(functionImport => !(0, edmx_to_vdm_util_1.hasUnsupportedParameterTypes)(functionImport))
        .map(f => {
        const httpMethod = f['m:HttpMethod'].toLowerCase();
        const swaggerDefinition = (0, swagger_parser_1.swaggerDefinitionForFunctionImport)(f.Name, httpMethod, serviceMetadata.swagger);
        return {
            ...(0, common_1.transformFunctionImportBase)(f, f.Parameter, swaggerDefinition, formatter),
            httpMethod,
            returnType: (0, common_1.parseFunctionImportReturnTypes)(f.ReturnType
                ? { Type: f.ReturnType, Nullable: 'false' }
                : undefined, entities, complexTypes, extractResponse(f.Name), serviceName)
        };
    }));
}
exports.generateFunctionImportsV2 = generateFunctionImportsV2;
//# sourceMappingURL=function-import.js.map