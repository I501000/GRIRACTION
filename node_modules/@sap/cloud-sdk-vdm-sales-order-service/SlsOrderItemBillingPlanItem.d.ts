import { Entity, DefaultDeSerializers, DeSerializers, DeserializedType } from '@sap-cloud-sdk/odata-v2';
import { SalesOrderItemBillingPlan, SalesOrderItemBillingPlanType } from './SalesOrderItemBillingPlan';
import { SalesOrder, SalesOrderType } from './SalesOrder';
import { SalesOrderItem, SalesOrderItemType } from './SalesOrderItem';
/**
 * This class represents the entity "A_SlsOrderItemBillingPlanItem" of service "API_SALES_ORDER_SRV".
 */
export declare class SlsOrderItemBillingPlanItem<T extends DeSerializers = DefaultDeSerializers> extends Entity implements SlsOrderItemBillingPlanItemType<T> {
    /**
     * Technical entity name for SlsOrderItemBillingPlanItem.
     */
    static _entityName: string;
    /**
     * Default url path for the according service.
     */
    static _defaultServicePath: string;
    /**
     * All key fields of the SlsOrderItemBillingPlanItem entity
     */
    static _keys: string[];
    /**
     * Sales Order.
     * Maximum length: 10.
     */
    salesOrder: DeserializedType<T, 'Edm.String'>;
    /**
     * Sales Order Item.
     * Maximum length: 6.
     */
    salesOrderItem: DeserializedType<T, 'Edm.String'>;
    /**
     * Billing Plan Number / Invoicing Plan Number.
     * Maximum length: 10.
     */
    billingPlan: DeserializedType<T, 'Edm.String'>;
    /**
     * Item for billing plan/invoice plan/payment cards.
     * Maximum length: 6.
     */
    billingPlanItem: DeserializedType<T, 'Edm.String'>;
    /**
     * Date category.
     * Controls data such as the billing block and the billing rule at the billing date level of the billing plan.
     * In Customizing for the billing plan, you can define a date category which sets a billing block automatically for the billing date. In the case of milestone billing, you can define whether a billing date of this category is a fixed date or whether it is dependent on an planned or actual date in the corresponding project milestone.
     * Maximum length: 2.
     * @nullable
     */
    billingPlanDateCategory?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Billing Date.
     * The date on which the billing is processed and booked for accounting purposes.
     * You can use the billing date as one of the selection criteria when you process billing documents collectively.If invoice dates are defined for the customer, the system proposes the billing date from the invoice date calendar. If no invoice dates are agreed, then the actual goods issue date is formed on the basis of delivery related billing. In order related billing, the billing date of the order forms the basis of the billing date.If you are billing services, the system proposes the date of services rendered. You can change the date manually in the sales document.If you are using a billing plan to bill a project, the system can propose billing dates for the billing plan on the basis of planned or actual dates in the corresponding milestone.In a billing plan for a maintenance or rental contract, you can specify rules by which the system determines billing dates on the basis of other dates in the contract.
     * @nullable
     */
    billingPlanBillingDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Value to be billed/calc. on date in billing/invoice plan.
     * Specifies the value to be billed which the system determines for the billing date on the basis of the billing rule assigned to it.
     * In the case of a contract, this is a total amount. For a project, this is a partial amount of the overall billing value which is determined on the basis of a percentage.
     * @nullable
     */
    billingPlanAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Currency Key.
     * Currency key for amounts in the system.
     * Maximum length: 5.
     * @nullable
     */
    transactionCurrency?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Percentage of value to be invoiced.
     * @nullable
     */
    billingPlanAmountPercent?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Terms of Payment Key.
     * Key for defining payment terms composed of cash discount percentages and payment periods.
     * It is used in sales orders, purchase orders, and invoices. Terms of payment provide information for:Cash managementDunning proceduresPayment transactionsData can be entered in the field for the terms of payment key in various ways as you enter a business transaction:In most business transactions, the system defaults the key specified in the master record of the customer/vendor in question.In some transactions (for example, credit memos), however, the system does not default the key from the master record. Despite this, you can use the key from the customer/vendor master record by entering "*" in the field.Regardless of whether or not a key is defaulted from the master record, you can manually enter a key during document entry at:item level in sales ordersheader level in purchase orders and invoicesMaster records have separate areas for Financial Accounting, Sales, and Purchasing. You can specify different terms of payment keys in each of these areas. When you then enter a business transaction, the application in question will use the key specified in its area of the master record.
     * Maximum length: 4.
     * @nullable
     */
    customerPaymentTerms?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Proposed billing type for an order-related billing document.
     * The billing type that the system automatically proposes when you create billing documents (invoices, credit memos, etc.) that refer to sales orders.
     * You can specify a billing type in this field for sales document items that are not relevant for delivery but that nevertheless require billing (for example, an item for a service, such as consultant hours).
     * Maximum length: 4.
     * @nullable
     */
    proposedBillingDocumentType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Date Description.
     * Describes the function of the billing plan date. Depending on the date category assigned to the billing plan category, the system proposes a date description for the dates in the billing plan. In a billing plan for a project, for example, the different milestones (e.g. conclusion of a contract, start-up) are proposed as date descriptions.
     * The descriptions are purely for the purpose of information. They can be issued within an output.
     * Maximum length: 4.
     * @nullable
     */
    billingPlanDateDescriptionCode?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Billing block for billing plan/invoice plan dates.
     * To prevent billing being performed on this date, you can enter a billing block in this field.
     * Billing dates for project milestones are blocked for billing until the milestone is reached. The block is removed automatically when the completion of the milestone is confirmed.If a billing block is set, billing cannot be performed for the date until the block is removed either manually or automatically.
     * Maximum length: 2.
     * @nullable
     */
    billingBlockReason?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Settlement date for deadline.
     * Depending on whether billing is to be carried out in advance or in arrears, this is either the start or end date of the settlement period for a specific billing plan date.
     * This date is used in periodic billing when time-dependent prices are defined.Billing plan for a rental contract for a piece of machineryBilling is to be carried out in advance on the first of the month for the entire month. The following price condition has been defined for the contract:Scale              Quantity                        PriceAs of 1 month      Rent for machinery per month    1000 USDAs of 12 months    Rent for machinery per month    1100 USDThe following billing values are determined on the basis of the settlement period and the price condition.Settlement periodSettl.from date  Settl.to date  Billing date     Billing value06/01/95         06/30/95       06/01/95         100007/01/95         07/31/95       07/01/95         100008/01/95         08/31/95       08/01/95         100006/01/96         06/30/96       06/01/96         1100In the example, the settlement-to date is the end of settlement period date because billing is to be performed in advance, that is, the indicator 'In advance' is set in the billing plan. If billing is to be performed in arrears, that is, the indicator 'In advance' is not set, the settlement-to date is the start of settlement period date.
     * @nullable
     */
    billingPlanServiceStartDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Settlement date for deadline.
     * Depending on whether the billing was carried out in advance or retrospectively, this is either the start date or the end date for the settlement period of a deadline in the billing plan.
     * This date is used if time-dependent prices are defined.Billing plan for the rental contract for a piece of equipment.Billing is to take place a month in advance on the first of each month. The following pricing condition is defined for the contract:Scale                Quantity                                    PriceAs of  1 Month       Rent for one piece of equipment per month   1000 DMAs of 12 Months      Rent for one piece of equipment per month   1100 DMThe following billing values are defined on the basis of the settlement period and the pricing condition:Settlement periodSettlement date from  Settlement date to    Billing date   Billing value01.06.95              30.06.95              01.06.95       100001.07.95              31.07.95              01.07.95       100001.08.95              31.08.95              01.08.95       100001.06.96              30.06.96              01.06.95       1100Since billing is to be carried out in advance, the settlement date is proposed as the billing date.In the example, the settlement date is from the start date of the settlement period, becuase billing is to be carried out in advance (the 'in advance' indicator is marked in the billing plan). If billing is to be carried out retrospectivey (the indicator is not set), the settlement date is from the end date of the settlement period.
     * @nullable
     */
    billingPlanServiceEndDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Billing status for the billing plan/invoice plan date.
     * Indicates the billing status of the authorization amount.
     * The statuses are as follows:Not relevantThe item is not relevant for billing. An authorization is not used in billing when the request for authorization is denied.Not processedThe authorization has not yet been used in a billing document.Partially billedThe system has not used all of the authorized amount. It holds this remaining amount for future use.Fully billedThe system has used the authorization in a billing document.This field is for information purposes and cannot be maintained.
     * Maximum length: 1.
     * @nullable
     */
    billingPlanRelatedBillgStatus?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Billing/Invoicing Plan Type.
     * Controls which fields are offered for processing. It also specifies how billing is performed for the billing dates in a billing plan of this type. The following options have been defined
     * Periodic billing - the entire value to be billed is billed in full on each billing plan dateMilestone billing - the total value to be billed is distributed between the individual billing plan dates (the value billed on each date can be fixed amount or a percentage)Periodic billing is used to bill rental or maintenance contracts.Milestone billing is used to bill projects.
     * Maximum length: 2.
     * @nullable
     */
    billingPlanType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * ID for adopting billing/invoice date.
     * Enter a code which controls whether the billing date in the billing plan is a fixed date or whether it is based on an actual or planned milestone date.
     * A milestone from an event in the corresponding network is assigned toeach billing date in the billing plan. If you enter a value other than 0 in this field, the planned or actual date from the milestone is adopted as the billing date. Changes made to the planned or actual date are automatically made to the billing date.If you enter 0 here, the billing date is fixed.Project: Installation of turbine at customer locationPlanned delivery date in the milestone - 06.30.95First billing date in the billing plan: Delivery of turbineFixed date indicator: 1 (Planned/actual date from milestone)The planned delivery date is changed to 07.01.95. However, the customer still wants to pay on the original billing date. Therefore, you would change the fixed date ID for the date to 0 (fixed date).You must enter a value in this field if you are using milestone billing.
     * Maximum length: 1.
     * @nullable
     */
    adoptingBillingDateId?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Rule in billing plan/invoice plan.
     * Specifies for each billing plan date how the value to be billed is determined.
     * Billing plan for a rental contract for a piece of machineryBilling dates:     First of the month for 12 monthsBilling amount:    1000 USD per monthEach date requires a billing rule which determines this fixed amount as the amount to be billed.Billing plan for the installation of a turbine at a customer locationBilling dates:     Date delivered                10%Date installed                30%Date turbine goes productive  70%Final invoiceBilling amount:    10,000 USD for entire projectEach date requires a billing rule which determines a percentage of the overall billing value of the project as the amount to be billed.In the second example, the billing values for each date could equally be fixed partial amounts rather than percentages. For example:Billing dates:     Date delivered                1,000 USDDate installed                3,000 USDDate turbine goes productive  6,000 USDBilling amount               10,000 USD.
     * Maximum length: 1.
     * @nullable
     */
    billingPlanBillingRule?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Usage.
     * Use this key to identify the usage of the milestone.
     * For the usage you can specify:the purpose of the milestone, for example to trigger a milestone function, for earned value analysis, or to identify a project phasethat the data of a standard milestone is copied when you create a new milestone on the milestone overviewthat milestones can be selected in the information system.
     * Maximum length: 5.
     * @nullable
     */
    billingPlanMilestoneUsage?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Indicator for correction date in billing plan.
     * Indicator for correction date in billing/invoice plan.
     * Maximum length: 1.
     * @nullable
     */
    billgPlnDteCorrectionRfndType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Exchange Rate for FI Postings.
     * @nullable
     */
    accountingExchangeRate?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Reason for Postponement.
     * Maximum length: 255.
     * @nullable
     */
    postponementReason?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * One-to-one navigation property to the [[SalesOrderItemBillingPlan]] entity.
     */
    toBillingPlan?: SalesOrderItemBillingPlan<T> | null;
    /**
     * One-to-one navigation property to the [[SalesOrder]] entity.
     */
    toSalesOrder?: SalesOrder<T> | null;
    /**
     * One-to-one navigation property to the [[SalesOrderItem]] entity.
     */
    toSalesOrderItem?: SalesOrderItem<T> | null;
}
export interface SlsOrderItemBillingPlanItemType<T extends DeSerializers = DefaultDeSerializers> {
    salesOrder: DeserializedType<T, 'Edm.String'>;
    salesOrderItem: DeserializedType<T, 'Edm.String'>;
    billingPlan: DeserializedType<T, 'Edm.String'>;
    billingPlanItem: DeserializedType<T, 'Edm.String'>;
    billingPlanDateCategory?: DeserializedType<T, 'Edm.String'> | null;
    billingPlanBillingDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    billingPlanAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    transactionCurrency?: DeserializedType<T, 'Edm.String'> | null;
    billingPlanAmountPercent?: DeserializedType<T, 'Edm.Decimal'> | null;
    customerPaymentTerms?: DeserializedType<T, 'Edm.String'> | null;
    proposedBillingDocumentType?: DeserializedType<T, 'Edm.String'> | null;
    billingPlanDateDescriptionCode?: DeserializedType<T, 'Edm.String'> | null;
    billingBlockReason?: DeserializedType<T, 'Edm.String'> | null;
    billingPlanServiceStartDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    billingPlanServiceEndDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    billingPlanRelatedBillgStatus?: DeserializedType<T, 'Edm.String'> | null;
    billingPlanType?: DeserializedType<T, 'Edm.String'> | null;
    adoptingBillingDateId?: DeserializedType<T, 'Edm.String'> | null;
    billingPlanBillingRule?: DeserializedType<T, 'Edm.String'> | null;
    billingPlanMilestoneUsage?: DeserializedType<T, 'Edm.String'> | null;
    billgPlnDteCorrectionRfndType?: DeserializedType<T, 'Edm.String'> | null;
    accountingExchangeRate?: DeserializedType<T, 'Edm.Decimal'> | null;
    postponementReason?: DeserializedType<T, 'Edm.String'> | null;
    toBillingPlan?: SalesOrderItemBillingPlanType<T> | null;
    toSalesOrder?: SalesOrderType<T> | null;
    toSalesOrderItem?: SalesOrderItemType<T> | null;
}
//# sourceMappingURL=SlsOrderItemBillingPlanItem.d.ts.map