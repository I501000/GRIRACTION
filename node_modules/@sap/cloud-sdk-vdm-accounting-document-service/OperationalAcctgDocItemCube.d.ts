import { Entity, DefaultDeSerializers, DeSerializers, DeserializedType } from '@sap-cloud-sdk/odata-v2';
/**
 * See https://api.sap.com/api/API_OPLACCTGDOCITEMCUBE_SRV for more information.
 */
export declare class OperationalAcctgDocItemCube<T extends DeSerializers = DefaultDeSerializers> extends Entity implements OperationalAcctgDocItemCubeType<T> {
    /**
     * Technical entity name for OperationalAcctgDocItemCube.
     */
    static _entityName: string;
    /**
     * Default url path for the according service.
     */
    static _defaultServicePath: string;
    /**
     * All key fields of the OperationalAcctgDocItemCube entity
     */
    static _keys: string[];
    /**
     * Company Code.
     * Maximum length: 4.
     */
    companyCode: DeserializedType<T, 'Edm.String'>;
    /**
     * Fiscal Year.
     * Maximum length: 4.
     */
    fiscalYear: DeserializedType<T, 'Edm.String'>;
    /**
     * Journal Entry.
     * The document number is the key the system uses to access the accounting document.
     * The document number is unique per company code and fiscal year. When entering an accounting document, you can specify the number manually or it can be determined by the system from a pre-defined area (number range).The relevant area of the document numbers (number range) is determined in each company code per document type.
     * Maximum length: 10.
     */
    accountingDocument: DeserializedType<T, 'Edm.String'>;
    /**
     * Journal Entry Posting View Item.
     * Maximum length: 3.
     */
    accountingDocumentItem: DeserializedType<T, 'Edm.String'>;
    /**
     * Company Code Name.
     * Maximum length: 25.
     * @nullable
     */
    companyCodeName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Chart of Accounts.
     * Maximum length: 4.
     * @nullable
     */
    chartOfAccounts?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Identification of the Line Item.
     * Some automatically created line items receive special indicators for further processing.
     * For external purposes, the field content is unimportant and, therefore, must not be used in customer reporting.In particular, there is no guarantee that the field is always filled (correctly).For internal purposes, a list of the indicators currently used (with no guarantee that it is complete)Use in invoice verification/inventory managementBUZID            Use8                " RevaluationA                " AssetB                " Warehouse stock orderC                " Warehouse stock order assignedK                " VendorF                " Delivery costsG                " Assigned delivery costsH                " Delivery costs - warehouse stock orderI                " Delivery costs - assigned warehouse stock orderL                " Warehouse orderM                " MaterialN                " Assigned orderP                " Price differenceS                " General G/L accountT                " TaxW                " GR/IR itemX                " Purchase order - assigned assetY                " Delivery costs - assigned assetZ                " Cash discount clearingUse for postings from SD billingBUZID            UseR                Discount/SurchargeUse in FI:Special feature: Not just used to indicate G/L accounts; also used for special open itemsBUZID         KOART              UseA             D;K                Statistical offsetting posting (Sp.G/L)P             D,K                Payment requestsU             S                  Valuation adjustments for reversalR             D,K                Residual items transfer postingE             D                  FSCM Biller DirectD             S                  Bill of exchange discountingS             D,K                Bill of exchange expensesW             S                  Bill of exchange tax.
     * Maximum length: 1.
     * @nullable
     */
    accountingDocumentItemType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Clearing Date.
     * @nullable
     */
    clearingDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Clearing Creation Date.
     * @nullable
     */
    clearingCreationDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Clearing Journal Entry.
     * Maximum length: 10.
     * @nullable
     */
    clearingAccountingDocument?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Clearing Status: Is Cleared.
     * @nullable
     */
    isCleared?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Posting Key.
     * Maximum length: 2.
     * @nullable
     */
    postingKey?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Account Type.
     * The account type determines whether the general ledger or one of the subledgers is used.
     * Maximum length: 1.
     * @nullable
     */
    financialAccountType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Special G/L Indicator.
     * Maximum length: 1.
     * @nullable
     */
    specialGlCode?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Special G/L Transaction Type.
     * The special G/L transaction type groups together similiar special G/L transactions.
     * By using this type, you can select entry screens or use certain calculation procedures, for example.The following types must be used :A      For all types of down payments as well as down payment requestsW      For all types of bills of exchange as well as bill of exchange payment requests.You can use any other types except for A and W for all other special G/L transactions.
     * Maximum length: 1.
     * @nullable
     */
    specialGlTransactionType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Debit/Credit Code.
     * Maximum length: 1.
     * @nullable
     */
    debitCreditCode?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Business Area.
     * Maximum length: 4.
     * @nullable
     */
    businessArea?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Business Area Name.
     * Maximum length: 30.
     * @nullable
     */
    businessAreaName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Partner Business Area.
     * Business area of the business partner. In each line item, a sender-receiver relationship is established in connection with the business area with which the posting is made.
     * This relationship enables internal business volume to be eliminated at the business area level (as part of business area consolidation).
     * Maximum length: 4.
     * @nullable
     */
    partnerBusinessArea?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Tax on Sales/Purchases Code.
     * The sales tax indicator is used in place of a tax category that must be taken into account for tax returns to the tax authorities.
     * The tax indicators are unique to each country. For each tax indicator, the tax rate and other properties are stored in the system.For tax-exempt or non-taxable transactions, tax indicators with the percentage 0 should be used if the corresponding transactions are to be entered in the tax returns.When tax rates are changed by legislation, new tax indicators have to be defined. The old indicators with the old tax rates must remain in force until there are no more open items that use this tax indicator.
     * Maximum length: 2.
     * @nullable
     */
    taxCode?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Withholding Tax Code.
     * Maximum length: 2.
     * @nullable
     */
    withholdingTaxCode?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Tax Type.
     * Indicator for differentiating output tax and input tax.
     * Maximum length: 1.
     * @nullable
     */
    taxType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Transaction Key.
     * Maximum length: 3.
     * @nullable
     */
    transactionTypeDetermination?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Value Date.
     * Value date
     * The value date is used in bank accounts and bank sub-accounts.
     * @nullable
     */
    valueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Assignment Reference.
     * Maximum length: 18.
     * @nullable
     */
    assignmentReference?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Item Text.
     * Contains an explanatory text on the line item.
     * Line item texts can be used internally and externally. To be able to distinguish between these, you must begin texts for external use with "*". These texts can then be printed on all correspondence, dunning notices, payment advice notes, etc. The asterisk is removed when the text is printed.This function is only available in the FI component. It cannot be used in Materials Management.
     * Maximum length: 50.
     * @nullable
     */
    documentItemText?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Company ID of Trading Partner.
     * Corporate-wide, unique company ID in your group.
     * Maximum length: 6.
     * @nullable
     */
    partnerCompany?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Financial Transaction Type.
     * Maximum length: 3.
     * @nullable
     */
    financialTransactionType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Corporate Group Account.
     * Maximum length: 10.
     * @nullable
     */
    corporateGroupAccount?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Planning Level.
     * The planning level is used to control displays in Cash Management.
     * The following levels could be possible:Only noted items in the cash positionOnly noted items in the liquidity forecastPurchase ordersSales ordersNotified incoming paymentsFI payment settlements (incoming checks, outgoing checks, bills of exchange, payments)FI bank transactions (bank statement postings, cashed checks, bill of exchange payments)You can freely choose the planning levels. You should, however, follow a naming convention:To improve the display of the cash position and liquidity forecast, you should reserve levels that start with "F" or "B" for automatically updating data during posting.  F levels should be used for bank accounts, customers, and vendors, and B levels for bank clearing accounts.Examples:F0: bank accountsF1: purchasing/sales (customers/vendors)FF: down payment requestsFW: bills of exchangeB1: bank clearing accounts, outgoing checksB2: bank clearing accounts, outgoing bank transfers (domestic)B3: bank clearing accounts, outgoing bank transfers (foreign country)B4: bank clearing accounts, bank collectionand so on.When displaying the cash position, you can then see because of level F0 that the amounts are posted to the bank account, whereas the other levels show planned bank account transactions, which include entered payment advices or postings to bank clearing accounts. You can then use the display to compare planned date with actual data.In addition, you should reserve levels, for example, all levels beginning with X, to represent postings with payment blocking indicators in the liquidity forecast. When displaying the liquidity forecast, you can then see because of these levels that the displayed amounts are postings with payment blocking indicators.General notes on accounts, or planning groups, and planning levels:Accounts/groups and levels enable you to look at data two different ways.Accounts/groups answer the who question.Which (major) customers or suppliers?Which customer or supplier group?Which bank account or bank clearing account?Levels answer the how question.How information was entered into the system (posting or payment advice or planned item)?How an amount is posted (normal posting or special G/L transaction)?How accurate information isWith amounts in the "outgoing transfers" level, you know the exact date on which the account is debited, but with amounts in the "outgoing checks" level, the date on which the account is debited is uncertain.In levels for MM and SD, both the amount and the planning date are more uncertain than the amount and date in FI postings, since the vendor may, for example, deliver only a subset or the delivery may be delayed. In addition, the system always displays MM amounts without taxes in the liquidity forecast (in purchase orders, tax is not displayed if it can be deducted; in purchase requisitions, it is never displayed).Where are cash management levels assigned in the system?In G/L accounts, you define the level in the company-code-specific part of the master record.For accounts receivable and payable, you define a standard level in the cash management and forecast group.At this time, you can define different levels for the following applications and activities:Locked itemsSpecial G/L transactionsPayment requestsPurchase orders and purchase requisitionsOrdersAgency dealsLoansSecuritiesMoney market, foreign exchange, derivativesReal estateEarmarked fundsThe levels defined should be unique - meaning you must not define the same level for more than one application or activity as this may affect the clarity of the display in the cash position or liquidity forecast. It might also adversely affect the function for jumping from these transactions to the correct application or line item display.
     * Maximum length: 2.
     * @nullable
     */
    planningLevel?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Controlling Area.
     * Maximum length: 4.
     * @nullable
     */
    controllingArea?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Controlling Area Name.
     * Maximum length: 25.
     * @nullable
     */
    controllingAreaName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Cost Center.
     * Maximum length: 10.
     * @nullable
     */
    costCenter?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Cost Center Name.
     * Maximum length: 20.
     * @nullable
     */
    costCenterName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Project.
     * Maximum length: 24.
     * @nullable
     */
    project?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Order ID.
     * Maximum length: 12.
     * @nullable
     */
    orderId?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Billing Document.
     * The number that uniquely identifies the billing document (the invoice, for example).
     * Maximum length: 10.
     * @nullable
     */
    billingDocument?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Sales Document.
     * The number that uniquely identifies the sales document.
     * Maximum length: 10.
     * @nullable
     */
    salesDocument?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Sales Document Item.
     * Maximum length: 6.
     * @nullable
     */
    salesDocumentItem?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Schedule Line.
     * The number that uniquely identifies the schedule line in the sales document.
     * When an item has more than one schedule line, the system automatically assigns a unique number to each line. The number is displayed in the details screens for schedule lines.The schedule line number serves internal purposes and does not, for example, determine the sequence of schedule lines in the overview screen. The schedule lines on the overview screen are sorted by date.
     * Maximum length: 4.
     * @nullable
     */
    scheduleLine?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Fixed Asset.
     * Maximum length: 12.
     * @nullable
     */
    masterFixedAsset?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Asset Subnumber.
     * Maximum length: 4.
     * @nullable
     */
    fixedAsset?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Asset Transaction Type.
     * Maximum length: 3.
     * @nullable
     */
    assetTransactionType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Asset Value Date.
     * The asset value date is the value date for Asset Accounting. It can deviate from the posting and document date and be in posting periods already closed for Financial Accounting. However, the posting year and asset value date year must be the same.
     * Since the asset value date can have a direct influence on the amount of depreciation, the system creates a default value when it can. You can specify in Customizing how the the default asset value date is determined by the system.
     * @nullable
     */
    assetValueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Personnel Number.
     * The personnel number is the only feature within a client which is unique to an employee. You have to enter a personnel number before you can display and maintain an employee's master data and time data.
     * Maximum length: 8.
     * @nullable
     */
    personnelNumber?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Is Sales Related.
     * @nullable
     */
    isSalesRelated?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Indicator: Can Line Items Be Displayed by Account?.
     * Enables line item display for the account.
     * For each line item, an entry is saved in an index table. This entry contains the connection between the line item and the account.In the New General Ledger, line item display is always possible for the general ledger view. You have to set this indicator if you- Also want to see the line items in the entry view- Want open item managementYou should not set the indicator for accounts where line item display in dialog does not make sense due to the number of postings. These include:Tax accountsReceivablesPayablesSpecific revenue and expense accounts.
     * @nullable
     */
    lineItemDisplayIsEnabled?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Managed on an Open Item Basis.
     * Maximum length: 1.
     * @nullable
     */
    isOpenItemManaged?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Is Not Cash Discount Liable.
     * @nullable
     */
    isNotCashDiscountLiable?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Is Automatically Created.
     * @nullable
     */
    isAutomaticallyCreated?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Is Used In Payment Transaction.
     * @nullable
     */
    isUsedInPaymentTransaction?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Operational General Ledger Account.
     * Maximum length: 10.
     * @nullable
     */
    operationalGlAccount?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * G/L Account.
     * Maximum length: 10.
     * @nullable
     */
    glAccount?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * G/L Account Name.
     * Maximum length: 30.
     * @nullable
     */
    glAccountName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * G/L Account Long Name.
     * Maximum length: 50.
     * @nullable
     */
    glAccountLongName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Customer Number.
     * Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system.
     * Maximum length: 10.
     * @nullable
     */
    customer?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Name of Customer.
     * Maximum length: 80.
     * @nullable
     */
    customerName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Supplier.
     * Maximum length: 10.
     * @nullable
     */
    supplier?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Name of Supplier.
     * Maximum length: 80.
     * @nullable
     */
    supplierName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Branch Account.
     * Maximum length: 10.
     * @nullable
     */
    branchAccount?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Is Balance Sheet Account.
     * @nullable
     */
    isBalanceSheetAccount?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Profit Loss Account Type.
     * Maximum length: 2.
     * @nullable
     */
    profitLossAccountType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Assignment Number for Special G/L Accounts.
     * Maximum length: 18.
     * @nullable
     */
    specialGlAccountAssignment?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Due Calculation Base Date.
     * @nullable
     */
    dueCalculationBaseDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Terms of Payment Key.
     * Key for defining payment terms composed of cash discount percentages and payment periods.
     * It is used in sales orders, purchase orders, and invoices. Terms of payment provide information for:Cash managementDunning proceduresPayment transactionsData can be entered in the field for the terms of payment key in various ways as you enter a business transaction:In most business transactions, the system defaults the key specified in the master record of the customer/vendor in question.In some transactions (for example, credit memos), however, the system does not default the key from the master record. Despite this, you can use the key from the customer/vendor master record by entering "*" in the field.Regardless of whether or not a key is defaulted from the master record, you can manually enter a key during document entry at:item level in sales ordersheader level in purchase orders and invoicesMaster records have separate areas for Financial Accounting, Sales, and Purchasing. You can specify different terms of payment keys in each of these areas. When you then enter a business transaction, the application in question will use the key specified in its area of the master record.
     * Maximum length: 4.
     * @nullable
     */
    paymentTerms?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Cash Discount Days 1.
     * Period within which a payment must be made in order to take advantage of the first cash discount terms.
     * @nullable
     */
    cashDiscount1Days?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Cash Discount Days 2.
     * Period within which a payment must be made in order to take advantage of the second cash discount terms.
     * @nullable
     */
    cashDiscount2Days?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Net Payment Terms Period.
     * Standard settlement period (in days).
     * @nullable
     */
    netPaymentDays?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Cash Discount Percentage 1.
     * @nullable
     */
    cashDiscount1Percent?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Cash Discount Percentage 2.
     * @nullable
     */
    cashDiscount2Percent?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Payment Method.
     * Payment method with which this item is to be paid.
     * If you enter a payment method, then only this payment method can be used in automatic payment transactions. If you do not enter a payment method, then one of the payment methods which was allowed in the master record is selected in the payment program according to specified rules.For document entry or document changes, you only enter a payment method if you want to switch off the automatic payment method selection of the payment program.
     * Maximum length: 1.
     * @nullable
     */
    paymentMethod?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Payment Blocking Reason.
     * Maximum length: 1.
     * @nullable
     */
    paymentBlockingReason?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Fixed Cash Discount.
     * Maximum length: 1.
     * @nullable
     */
    fixedCashDiscount?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * House Bank Key.
     * All bank data is determined using this key.
     * Maximum length: 5.
     * @nullable
     */
    houseBank?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Business Partner Bank Account Internal ID.
     * Maximum length: 4.
     * @nullable
     */
    bpBankAccountInternalId?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Tax Code 1 for Distribution.
     * Maximum length: 2.
     * @nullable
     */
    taxDistributionCode1?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Tax Code 2 for Distribution.
     * Maximum length: 2.
     * @nullable
     */
    taxDistributionCode2?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Tax Code 3 for Distribution.
     * Maximum length: 2.
     * @nullable
     */
    taxDistributionCode3?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Invoice Reference.
     * Maximum length: 10.
     * @nullable
     */
    invoiceReference?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Invoice Reference Fiscal Year.
     * Maximum length: 4.
     * @nullable
     */
    invoiceReferenceFiscalYear?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Invoice Item Reference.
     * Maximum length: 3.
     * @nullable
     */
    invoiceItemReference?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Follow-On Document Type.
     * Maximum length: 1.
     * @nullable
     */
    followOnDocumentType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * State Central Bank Indicator.
     * Germany
     * In foreign payment transactions, information concerning the reason for payment is needed for the report according to German foreign trade regulations (AWV).The possible reasons for payment are defined within configuration for SCB indicators. This includes certain indicators which are the key to the reasons for payment, and an explanatory text.The reasons for payment appear on the reporting form and/or in the corresponding data medium exchange.AustriaFor foreign bank transfers, the explanatory text for the OeNB is determined using this indicator on the bank transfer form or in the data medium exchange.BelgiumThe content of the first text field for this indicator is used in the data medium exchange.NetherlandsThe usage of the state central bank indicator, the document type and the texts for this indicator is explained in the detailed documentation for the individual fields.JapanFor foreign bank transfers, the reason for payment is determined by this indicator when reporting to the Japanese ministry of finance.We recommend entering a "J" as the first letter so that you can better distinguish this report from other non-Japanese reports.
     * Maximum length: 3.
     * @nullable
     */
    stateCentralBankPaymentReason?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Supplying Country.
     * Maximum length: 3.
     * @nullable
     */
    supplyingCountry?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Invoice List.
     * Maximum length: 8.
     * @nullable
     */
    invoiceList?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Bill of Exchange Usage Type.
     * Determines the type of bill of exchange usage.
     * Maximum length: 1.
     * @nullable
     */
    billOfExchangeUsage?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Dunning Key.
     * Determines that the item can only be dunned with restrictions or is to be displayed with an extra text line on the dunning notice. The keys are freely-definable.
     * You define the contents of the text line in Customizing for the dunning key.If you enter a key in an item, then it can only reach the maximum dunning level defined for this key. Therefore it is possible that an item can contain one dunning notice at the most, although several dunning levels are defined in the dunning procedure.
     * Maximum length: 1.
     * @nullable
     */
    dunningKey?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Dunning Blocking Reason.
     * Maximum length: 1.
     * @nullable
     */
    dunningBlockingReason?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Date of Last Dunning Notice.
     * Date on which the last dunning notice was made.
     * @nullable
     */
    lastDunningDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Dunning Level.
     * Number that specifies how often an item or account has been dunned.
     * The business partner has received the dunning level from the last dunning run.If you use dunning areas, it is the dunning level that the business partner received from the last dunning run in the dunning area assigned.The dunning program sets the dunning level automatically when the customer or vendor receives a dunning notice.
     * Maximum length: 1.
     * @nullable
     */
    dunningLevel?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Dunning Area.
     * The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.
     * If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary.
     * Maximum length: 2.
     * @nullable
     */
    dunningArea?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Withholding Tax Certificate.
     * Maximum length: 10.
     * @nullable
     */
    withholdingTaxCertificate?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Material Number.
     * Alphanumeric key uniquely identifying the material.
     * Maximum length: 40.
     * @nullable
     */
    material?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Material Number.
     * Alphanumeric key uniquely identifying the material.
     * Maximum length: 40.
     * @nullable
     */
    product?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Plant.
     * Key uniquely identifying a plant.
     * Maximum length: 4.
     * @nullable
     */
    plant?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Purchasing Document.
     * Maximum length: 10.
     * @nullable
     */
    purchasingDocument?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Purchasing Document Item.
     * Maximum length: 5.
     * @nullable
     */
    purchasingDocumentItem?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Sequential Number of Account Assignment.
     * Number uniquely defining the account assignment of a purchase document item.
     * Maximum length: 2.
     * @nullable
     */
    accountAssignmentNumber?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Is completely delivered.
     * @nullable
     */
    isCompletelyDelivered?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Price control indicator.
     * Indicates the price control used to valuate the stock of a material. You have the following options:
     * Standard priceMoving average priceIf the material ledger is activated for the material, this indicator, together with the material's price determination indicator, determines at which of the following prices the material is valuated:Standard priceMoving average pricePeriodic unit price.
     * Maximum length: 1.
     * @nullable
     */
    materialPriceControl?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Valuation Area.
     * Organizational level at which the material is valuated. A valuation area can be one of the following:
     * PlantAll plants belonging to a company code, in which case the valuation area is the company code.
     * Maximum length: 4.
     * @nullable
     */
    valuationArea?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Valuation Type.
     * Uniquely identifies separately valuated stocks of a material.
     * The valuation types allowed for a material are determined by the valuation category.If a material is valuated according to its origin (valuation category H), you can define the possible countries of origin as valuation types.
     * Maximum length: 10.
     * @nullable
     */
    inventoryValuationType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * VAT Registration.
     * Maximum length: 20.
     * @nullable
     */
    vatRegistration?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Country of Destination for Delivery of Goods.
     * Country to which goods are supplied.
     * In the field, the country key of the customer is defaulted.You must change the default value if the country of destination of the goods differs from the reporting country (see field with the same name).The field is currently not used in evaluations but it is planned that this field will be used for processing triangular deals.
     * Maximum length: 3.
     * @nullable
     */
    delivOfGoodsDestCountry?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Payment Difference Reason.
     * Maximum length: 3.
     * @nullable
     */
    paymentDifferenceReason?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Profit Center.
     * Maximum length: 10.
     * @nullable
     */
    profitCenter?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Description of Profit Center.
     * Maximum length: 20.
     * @nullable
     */
    profitCenterName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Joint Venture.
     * A joint venture in the SAP System is a summarization of cost objects whose costs are split up among partners.
     * A joint venture is usually lead by an operating authority, who is responsible for the costs incurred. At the end of a period, all of the costs incurred are split up and allocated to the partners involved.Joint ventures are created to keep costs as low as possible for the operating authority and the partners. This is achieved by distributing the costs incurred to the participants of the joint venture.In the oil industry, new drill-holes are seldomly controlled by the oil companies alone. Instead, contracts are made with other companies. The contract regulates the costs incurred. This enables the risks involved with an unsuccessful drill-hole to be spread out over several companies.Of course, the anticipated profits (from a rich drill-hole) are also distributed to the partners involved.  However, the distribution of the profits is not carried out by the SAP Joint Venture Accounting solution.
     * Maximum length: 6.
     * @nullable
     */
    jointVenture?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Recovery Indicator.
     * In global companies that belong to joint ventures, incurred costs are usually shared among different recovery indicators which can then be dealt with in different ways using the periodic settlement program.
     * You can define recovery indicators at three different levels:o Document typeYou can assign a recovery indicator to each document type for thecredit side and for the debit side. These recovery indicators areinternal recovery indicators and are defined in a separate systemtable.o Cost element (primary and secondary)o Cost objectWhen you make a posting in one of the feeder systems of the Joint Venture Accounting System, all three levels are evaluated in the sequence defined. The first recovery indicator found is transferred to the Joint Venture Accounting System.o Costs that are 100% allocableo Costs borne 100% by the operatoro Overheads applied by the operatoro Costs which exceed a contractually agreed price and cannot thereforebe allocatedo Costs already allocated.
     * Maximum length: 2.
     * @nullable
     */
    jointVentureCostRecoveryCode?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Equity Group.
     * Maximum length: 3.
     * @nullable
     */
    jointVentureEquityGroup?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Treasury Contract Type.
     * Maximum length: 1.
     * @nullable
     */
    treasuryContractType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Asset Contract.
     * Maximum length: 13.
     * @nullable
     */
    assetContract?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Flow Type.
     * The flow type classifies a flow in the cash flow. A flow changes an accounting item (position item, expense or income, and so on).
     * You can only use a flow type in connection with a financial transaction if you have assigned the flow typy to the corresponding product type in Customizing.
     * Maximum length: 4.
     * @nullable
     */
    cashFlowType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Tax Jurisdiction.
     * Maximum length: 15.
     * @nullable
     */
    taxJurisdiction?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Internal Key for Real Estate Object.
     * Maximum length: 40.
     * @nullable
     */
    realEstateObject?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Reference Date for Settlement.
     * @nullable
     */
    settlementReferenceDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Commitment Item.
     * Maximum length: 24.
     * @nullable
     */
    commitmentItem?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Cost Object.
     * Term identifying the cost object ID.
     * Cost objects are the activity units of business whose costs are assigned based on the cost origins. The R/3 System distinguishes between the following types of cost objects:Cost objects represented by a cost object IDCost objects represented by objects from other components, such as production orders or sales order itemsCost objects in the following areas are represented by cost object IDs:Activity-Based Costing (CO-OM-ABC)In Activity-Based Costing, overhead is first assigned to cost centers and then to business processes. From there, the overhead is assigned to cost objects as process costs.Costs for Intangible Goods and Services (CO-PC-OBJ)In Costs for Intangible Goods and Services, costs can be analyzed on general cost objects.Product Cost by Period (CO-PC-OBJ)In Product Cost by Period you can create a cost object hierarchy to record actual costs that cannot be recorded at the material or order level. You can distribute the costs assigned to the nodes of a cost object hierarchy directly to the individual objects in the lowest cost object nodes at period-end closing (for example, product cost collectors) or you can settle the costs directly from the cost object hierarchy to a price difference account.Product Cost Controlling Information System (CO-PC)You can create further cost object IDs in the Product Cost Controlling Information System for CO product groups. You can create a cost object ID for each group, and assign materials to the cost object ID. The costs of the assigned materials appear in summarized form in the information system by product group.You can use CO product groups for product drilldown reports.The cost object type determines which functions can be used with the cost object. Functions for cost object hierarchies are performed on the assumption that the given cost object indicates the top node of the hierarchy.
     * Maximum length: 12.
     * @nullable
     */
    costObject?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Network Number for Account Assignment.
     * A network can structure an entire project or a task within a project.
     * Numbers are used to differentiate these project structures.When you specify a network, for example, when you are entering attendances, you can define that the network is debited when the sender cost center is credited.Use the possible entries pushbutton to select the network number for the required project structure.
     * Maximum length: 12.
     * @nullable
     */
    projectNetwork?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Order Internal Bill of Operations ID.
     * Maximum length: 10.
     * @nullable
     */
    orderInternalBillOfOperations?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Order Internal Bill of Operations Item.
     * Maximum length: 8.
     * @nullable
     */
    orderIntBillOfOperationsItem?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * WBS Element (Internal Number Without Conversion).
     * Key that indicates a WBS element.
     * Maximum length: 8.
     * @nullable
     */
    wbsElementInternalId?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Profitability Segment Number (CO-PA).
     * See glossary
     * Examples:Customer '123'/Product '4710'         Profitability segment no. 1Customer '123'/Product '4712'         Profitability segment no. 2Country 'USA'/Region 'NORTH'          Profitability segment no. 3.
     * Maximum length: 10.
     * @nullable
     */
    profitabilitySegment?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Equity type.
     * Maximum length: 3.
     * @nullable
     */
    jointVentureEquityType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Is EU Triangular Deal.
     * If you select this field, the system includes this transaction in the EC sales list under the triangular deal section.
     * @nullable
     */
    isEuTriangularDeal?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Origin Group as Subdivision of Cost Element.
     * Used for subdividing material and overhead costs.
     * When material costs are calculated, each material is given a general ledger account and thus is assigned to a primary cost element. If you enter an origin group for the material, the combination of source group and cost element is updated to the CO component. This means that you canDefine calculation bases for determination of overhead rates for particular material groups.Define cost components in product costing for particular material groups.Create rules for activating work in process for each material group.When overhead is calculated, an object is debited with overhead costs and another object (usually a cost center) is credited. For more information on the origin of overhead rates in the credit record, specify an origin group in the credit key. The system then displays the origin group in Cost Center Accounting, as well as the overhead cost element.
     * Maximum length: 4.
     * @nullable
     */
    costOriginGroup?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Company Code Currency Determination Method.
     * Maximum length: 1.
     * @nullable
     */
    companyCodeCurrencyDetnMethod?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Clearing Is Reversed.
     * @nullable
     */
    clearingIsReversed?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Payment Method Supplement.
     * Characteristic in an open item for the grouping of payments.
     * Items with different payment method supplements are settled individually. When printing a form, it is possible to print separately according to payment method supplement. Checks can thus be divided into several groups that are then subject to a number of different checking procedures in the company before being mailed, for example.When entering invoices, the payment method supplement is defaulted from the master record of the customer/vendor. You can overwrite this supplement.
     * Maximum length: 2.
     * @nullable
     */
    paymentMethodSupplement?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Alternative G/L Account Number In Company Code.
     * Maximum length: 10.
     * @nullable
     */
    alternativeGlAccount?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Funds Management Center.
     * Alphanumeric code for the funds center, which you are creating, changing, or displaying, or to which you are assigning budget.
     * Maximum length: 16.
     * @nullable
     */
    fundsCenter?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Fund.
     * Key which uniquely identifies the fund.
     * If you assign the budget to a fund, you can obtain a detailed list of origin for the amounts involved.
     * Maximum length: 10.
     * @nullable
     */
    fund?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Partner Profit Center.
     * The partner profit center identifies the service and delivery relationships between profit centers.
     * In the case of the receiver of a service/delivery, the sending profit center is entered as the partner profit center and vice versa.
     * Maximum length: 10.
     * @nullable
     */
    partnerProfitCenter?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * ID of Reference 1 by Business Partner.
     * In this field, you can enter customer/vendor details for the accounting transaction.
     * As additional information, for correspondence with the customer/vendor, as a search criterion for items in the customer/vendor account.Enter the customer/vendor details which you need for subsequent processing according to your individual company's regulations.Possible information would be, for example, a customer/vendor branch number, or a transaction number under which a controversial transaction is managed at the customer/vendor.
     * Maximum length: 12.
     * @nullable
     */
    reference1IdByBusinessPartner?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * ID of Reference 2 by Business Partner.
     * In this field, you can enter customer/vendor details for the accounting transaction.
     * As additional information, for correspondence with the customer/vendor, as a search criterion for items in the customer/vendor account.Enter the customer/vendor details which you need for subsequent processing according to your individual company's regulations.Possible information would be, for example, a customer/vendor branch number, or a transaction number under which a controversial transaction is managed at the customer/vendor.
     * Maximum length: 12.
     * @nullable
     */
    reference2IdByBusinessPartner?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Is Negative Posting.
     * Indicates that the transaction figures for this line item are reversed.
     * If you set this indicator, you change the way the transaction figures for this account are updated, namely that when you make a debit posting, the credit side of the account is reduced, when you make a credit posting, the debit side of the account is reduced.You use this indicator if the reason for reversal you specified makes negative postings necessary. The system then reverses all the updates of transaction figures caused by the document you reversed.In addition, when you enter documents, individual line items can also be marked as negative postings, provided this is permitted for the document type in question.To reverse transaction figures, set this indicator when entering line items.
     * @nullable
     */
    isNegativePosting?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Payment Card Item.
     * Maximum length: 3.
     * @nullable
     */
    paymentCardItem?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Payment Card Payment Settlement.
     * Maximum length: 10.
     * @nullable
     */
    paymentCardPaymentSettlement?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Credit Control Area.
     * The credit control area is an organizational entity which grants and monitors a credit limit for customers. A credit control area can include one or more company codes.
     * You can also enter the credit control area separately for each posting, if this was marked in the appropriate company code.When entering an order, the credit control area can also be determined from the business area and the sales area segement of the payer's master record or using a user exit.It follows that company codes and credit control areas are not linked.The only thing that you define in the company code table is the default credit control area. This is used either for payments on account to credit these payments, or where you did not enter a credit control area or the system could not determine one.There is also an allocation table of permitted credit control areas per company code which is used to check entries only.
     * Maximum length: 4.
     * @nullable
     */
    creditControlArea?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * ID of Reference 3 by Business Partner.
     * Maximum length: 20.
     * @nullable
     */
    reference3IdByBusinessPartner?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Data Exchange Instruction 1.
     * - Germany
     * Instruction key 1 is used in Germany for foreign data medium exchange (field T16). The instruction key informs the bank how the payment is to be carried out. You can find out what each key means in the format descriptions issued by the banks.Instruction key 1 is copied into the instruction key field of the Z1 form and assigned as follows (entries 06/07 are alternatives):SAP field                   Meaning of instructionInstr. 1    Z1 form         in Z1 form06          1             Advice note to beneficiary's bank07          1             Advice note to beneficiary's bank09          2             Advice to beneficiary by telephone10          3             Advice to beneficiary by fax/telex04          4             Payment against legitimation- The NetherlandsInstruction key 1 is used in the Netherlands as the payment instruction code for foreign bank transfers by data medium exchange.- FranceIn France, this key is used for data medium exchange abroad (field 9 in record 'Enregistrements complementaires')- BrazilIn Brazil, instruction key 1 is used for the 'Codigo de Ocorrência' statement.- DenmarkIn Denmark, this key is used in the format PostGiro Udland.- FinlandInstruction key 1 is used in the ULMP and LUM2 formats. The payment method can be determined via the instruction key.- SWIFT MT formatsFor the SWIFT MT formats, instruction key 1 is converted into a code that is entered in field 72.- JapanInstruction key 1 is used in Japan for data medium exchange abroad. The instruction key informs the bank whether payment should be wired or mailed, or whether a check should be sent. You can find out what each key means in the format descriptions issued by the banks.- NorwayIn Norway, instruction key 1 is used in Autogiro and Telepay formats.For the Autogiro format, the instruction key can inform the bank if the payer should receive notification.For foreign payments using the Telepay format, instruction key 1 can inform the bank how the payee should be advised.
     * Maximum length: 2.
     * @nullable
     */
    dataExchangeInstruction1?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Data Exchange Instruction 2.
     * Germany
     * Instruction key 2 is used in Germany in foreign data medium exchange (field T17).AustriaIn Austria, instruction key 2 is used for foreign transfers (DME) for the transfer type rapid payment.NetherlandsIn the Netherlands, instruction key 2 is used as a code for payment instructions when making payments abroad by DME.FranceIn France, instruction key 2 is used for data medium exchange abroad (field 9 in record 'Enregistrements complementaires')BrazilIn Brazil, this key can be used as a further specification criteria for instruction key 1 ('Codigo de Ocorrência').SWIFT MT formatsFor the SWIFT MT formats, instruction key 2 is converted into a code that is entered in field 72.JapanInstruction key 2 is used in Japan for data medium exchange abroad. The instruction key informs the bank whether the payment should be made according to notification or to an account. You can find out what each key means in the format descriptions issued by the banks.
     * Maximum length: 2.
     * @nullable
     */
    dataExchangeInstruction2?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Data Exchange Instruction 3.
     * Germany
     * Instruction key 3 is used in Germany for foreign data medium exchange (field T18).Note: If the value 95 is entered, the reporting section of the data medium is issued in the order currency. For the Z1 form, you use the relevant parameter in payment medium program RFFOD__L.NetherlandsIn the Netherlands, instruction key 3 is used for foreign bank transfers by DME as a code for the payment instructions.BrazilIn Brazil, instruction key 3 can be used as an additional selection criteria for instruction key 1 ('Codigo de Ocorrência').SWIFT MT formatsFor the SWIFT MT formats, instruction key 3 is converted into a code that is entered in field 72.JapanInstruction key 3 is used in Japan for foreign data medium exchange. The instruction key informs the bank whether the currency translation should be made according to the current rate of exchange or a hedged exchange rate, or whether payment should be made from a foreign exchange account or in Japanese Yen. You will find more details on what the key means in the the format descriptions issued by the bank.
     * Maximum length: 2.
     * @nullable
     */
    dataExchangeInstruction3?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Data Exchange Instruction 4.
     * Germany
     * Instruction key 4 is used in Germany for foreign data medium exchange (field T19).NetherlandsIn the Netherlands, key 4 is used as a code for the payment instructions when making transfers abroad by DME.SWIFT MT formatsIn the case of SWIFT MT formats instruction key 4 is converted into a code that is entered in field 72.
     * Maximum length: 2.
     * @nullable
     */
    dataExchangeInstruction4?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Region (State, Province, County).
     * In some countries, the region forms part of the address. The meaning depends on the country.
     * The automatic address formatting function prints the region in addresses in the USA, Canada, Italy, Brazil or Australia, and the county in Great Britain.For more information, see the examples in the documentation on the Address Layout Key.Meaning of the regional code in ...Australia       ->  ProvinceBrazil          ->  StateCanada          ->  ProvinceGermany         ->  StateGreat Britain   ->  CountyItaly           ->  ProvinceJapan           ->  PrefectureSwitzerland     ->  CantonUSA             ->  State.
     * Maximum length: 3.
     * @nullable
     */
    region?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Indicator: Payment Order Exists for this Item.
     * The item can be locked by a payment run using a payment order or a debit memo notification against any further clearing transactions. This indicator provides the reason for the clearing lock.
     * The lock can be removed by the related program.
     * @nullable
     */
    hasPaymentOrder?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Payment Reference.
     * The payment reference contains a key for customer line items which is passed on to the customer in the invoice. The customer should refer to the payment reference when making the payment.
     * For vendor line items, the key that the vendor passes on in the invoice is entered in the payment reference. In automatic payment transactions, the payment reference can be passed on again to the payee.When an outgoing payment is made, the payment reference you specify is passed on to the relevant financial institute and from there to the payee.When you are processing your account statement, you can use the payment reference to determine which items you have paid and then clear them.Payment reference numbers are often used in Finland, Norway, and Sweden. These countries also have rules for the structure of the payment reference. Check digit procedures are used to check that these rules are followed.DME Finland: The number '4477' has a check digit of '8' and should be defined as the character string '44778'.DME Norway: The number '12345678' has the check digit '2' when using the Modulo-10 method, and check digit '5' when using the Modulo-11 method. Therefore, 123456782 or 123456785 are permitted as payment references.DME Sweden: The number '1234567890' has the check digit '3' and should be defined as the character string '12345678903'. The Modulo procedure used is a form of Modulo-10 with the key '1212121'.
     * Maximum length: 30.
     * @nullable
     */
    paymentReference?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Date for Determination of Tax Rates.
     * This field is significant when determining tax rates.
     * The system determines the date for calculating time-dependent tax (depending on the Customizing settings in the company code) either from the posting date or from the document date.If you want to use a date which is neither the posting date nor the document date for calculating tax on sales/purchases, you can enter the alternative date here.
     * @nullable
     */
    taxDeterminationDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Clearing Item.
     * @nullable
     */
    clearingItem?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Business Place.
     * Specifies the business place.
     * Maximum length: 4.
     * @nullable
     */
    businessPlace?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Tax Section.
     * Maximum length: 4.
     * @nullable
     */
    taxSection?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Activity Type.
     * Key uniquely identifying .
     * Activity types describe the activity produced by a cost center and are measured in units of time or quantity.In activity type planning, control data determines whether the activity price for evaluation of the activity type is manually set or is derived iteratively through activity price calculation.
     * Maximum length: 6.
     * @nullable
     */
    costCtrActivityType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Accounts Receivable Is Pledged.
     * Maximum length: 2.
     * @nullable
     */
    accountsReceivableIsPledged?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Business Process.
     * Key uniquely identifying a business process.
     * Maximum length: 12.
     * @nullable
     */
    businessProcess?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Grant.
     * Legal instrument used to establish a funding relationship between a sponsor (grantor) and grantee, in order to carry out a public purpose of support or stimulation in which the sponsor does not expect to be substantially involved.
     * A grant may be for any purpose and cover all or only part of the costs of the project in question. You must enter a grant type for each grant you create in Grants Management (GM).The grant as an object has a finite lifecycle, divided into stages. Each stage is represented in the GM solution by a system status. The following are the stages of a grant's lifecycle:Initial DraftThis is the first stage of a grant. It is a working copy that can be modified as many times as needed.ProposalWhen the initial draft becomes a formal and complete document, it becomes a proposal.ApplicationWhen a proposal is routed to the sponsor for approval, it becomes an application. This application might contain changes in the budget or other adjustments.AwardIf the sponsor approves an application, an award is created. This is the real operative stage of a grant. The creation and consumption of the grant's budget occurs at this stage. This stage also represents the binding contract between the sponsor and the grantee.ClosingWhen an award is expiring, a phase of closing is established. Only restricted operations can be performed in this stage.ClosedThis stage defines an expired and closed grant. No further operations are allowed except archiving.
     * Maximum length: 20.
     * @nullable
     */
    grantId?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Functional Area.
     * Used to structure a public organization or enterprise according to functional criteria.
     * The functional area is required in Funds Management in order to fulfill legal reporting requirements subdividing an organization into functions. You can use the functional area to map global aims and purposes, for example, public safety, town planning, and the expenditures of your organization.For more information on the functional area, see the Implementation Guide of Funds Management Government, section Functional Area in Funds Management Government.
     * Maximum length: 16.
     * @nullable
     */
    functionalArea?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Functional Area Name.
     * Maximum length: 30.
     * @nullable
     */
    functionalAreaName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Customer Is In Execution.
     * @nullable
     */
    customerIsInExecution?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Funded Program.
     * With funded programs, you can map another functional grouping of you organization's expenditures (FM area) as well as the functional area.
     * You creat funded programs in the component Funds Management Public Sector. They can be budgeted but not assigned to an account directly. The account assignment is always derived from a different account assignment object with a posting, for example from a CO order or project structure plan element.
     * Maximum length: 24.
     * @nullable
     */
    fundedProgram?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Fiscal Year of Clearing Journal Entry.
     * Maximum length: 4.
     * @nullable
     */
    clearingDocFiscalYear?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Ledger Journal Entry Item.
     * Maximum length: 6.
     * @nullable
     */
    ledgerGlLineItem?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Segment for Segmental Reporting.
     * Maximum length: 10.
     * @nullable
     */
    segment?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Segment Name.
     * Maximum length: 50.
     * @nullable
     */
    segmentName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Partner Segment for Segmental Reporting.
     * Maximum length: 10.
     * @nullable
     */
    partnerSegment?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Partner Functional Area.
     * Structure criterion for an enterprise or government based on functional aspects.
     * Use for Cost-of-Sales AccountingThe functional area is required to create a profit and loss account in Financial Accounting using cost-of-sales accounting. The following are examples of structure criteria:ManufacturingAdministrationSalesResearch and developmentUse for GovernmentThe functional area is needed for Funds Management to meet legal requirements for reporting with functional aspects. You can use the functional area to represent the global targets and goals (such as public safety or city development), in particular the expenses of your organization.Use in cost-of-sales accountingSee the documentation on Filling the Functional Area Field.For comprehensive information on cost-of-sales accounting and on the functional area, see the SAP Library under Accounting -> Financial Accounting -> General Ledger -> Cost-of-Sales Accounting.Use in governmentFor more information on the functional area, see the implementation Guide for Funds Management Government in the section Activate Account Assignment Elements.
     * Maximum length: 16.
     * @nullable
     */
    partnerFunctionalArea?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * House Bank Account.
     * Maximum length: 5.
     * @nullable
     */
    houseBankAccount?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Cost Element.
     * Key that defines a cost element uniquely.
     * Cost elements are items in a chart of accounts that are relevant to cost and are used to enter all costs within the entire cost accounting system.Cost elements are a prerequisite for comprehensive reporting and detailed planning.
     * Maximum length: 10.
     * @nullable
     */
    costElement?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Unique Reference to Mandate for each Payee.
     * Identifies, together with the Creditor Identifier, the mandate uniquely.
     * The mandate reference can be specified externally or be determined by internal number assignment. The system determines 12 digit numerical mandate references for the internal number assignment.Whether internal or external number assignment (or both) is possible depends on the application concerned.Once you have created the mandate, you can no longer change its mandate reference.At event 0570, you can implement different logic using your own installation-specific function module. Register the function module in Customizing for Contract Accounts Receivable and Payable under Business Transactions -> Incoming/Outgoing Payment Creation -> Management of SEPA Mandates -> General Settings in the Mandate Reference field.Notes on Assigning Contract Accounts and Contracts to MandatesYou can enter a mandate reference in various FI-CA objects (such as, the document item, the contract account, or the contract). The effect of entering a reference is that the system uses the entered mandate for this object during payment.Notes on Using Alternative PayersIf you want to enter an alternative payer P1 for business partner B1 with contract account C1, you have to enter the mandate for this alternative payer P1. If the mandate is to be used now exclusively for paying postings on B1, then enter B1 in the field Payment for Alternative Debtor/ID on the lower part of the screen. If you want the mandate to be used only for a certain contract account of B1 (for instance, for C1), then enter the ID of this contract account in the Contract Account field on the upper part of the screen.ExampleYou enter mandate M1 in contract account C1. When items of contract C1 are paid, the system uses mandate M1.Using a mandate for one object does not exclude using it for another object. That means, for example, that you could also enter mandate M1 in contract C2 as the mandate to be used. In that case, no contract account is entered in the mandate itself, so that it can be referenced from multiple objects.Example - Assignment of a mandate to multiple contract accountsContract account Mandate (in Contract Acct) MeaningC1 M1 Mandate M1 is valid for C1.C2 M1 Mandate M1 is also valid for C2.C3 M2 Mandate M2 is valid for C3.C4 M2 Mandate M2 is also valid for C4.Another alternative is to enter the contract account in the mandate itself. The result of making this assignment, however, is that the mandate can only be used (exclusively) for the payment of items of this one contract account.Example - Assignment of one contract account per mandateMandate Contract Account (in Mandate) MeaningM1 C1 Mandate M1 is only valid for items of contract account C1.M2 C2 Mandate M2 is only valid for items of contract account C2.If you want a mandate to be used by several FI-CA objects (such as, document, contract account, or contract), enter the mandate only in the given objects.The examples above apply in a similar manner to the assignment of contracts.Even if you do not enter payment data at the contract level in contracts of the various industry components that use Contract Accounts Receivable and Payable, it can be useful to make an assignment between the contract and the mandate. This makes it possible to have the system pay postings assigned to a contract using a specific mandate.If you do not make any assignments between FI-CA objects (such as, document, contract account, or contract) and a mandate, the system determines the mandate from the bank details entered in the payment data of the payer. In doing so, the system compares the IBAN in the mandate with the IBAN of the bank details.If there are several active mandates for the same bank details of the payer, but there are no additional assignments between the mandate and the FI-CA object, you can use event 0653 to specify which of the mandates is used for making the payment.If you do not make any specification, the system uses the first mandate that qualifies for the payment.
     * Maximum length: 35.
     * @nullable
     */
    sepaMandate?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Reference Document Type.
     * Maximum length: 5.
     * @nullable
     */
    referenceDocumentType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Original Reference Document.
     * Maximum length: 20.
     * @nullable
     */
    originalReferenceDocument?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Logical System of Reference Document.
     * Maximum length: 10.
     * @nullable
     */
    referenceDocumentLogicalSystem?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Journal Entry Line Item Reference.
     * Maximum length: 10.
     * @nullable
     */
    accountingDocumentItemRef?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Fiscal Period.
     * A fiscal period is a self-contained part of a fiscal year.
     * Every business transaction is allocated to a fiscal period.Examples of period classifications:Per calendar month -> 12 fiscal periodsEvery 4 weeks -> 13 fiscal periodsWeekly -> 52 or 53 fiscal periods.
     * Maximum length: 3.
     * @nullable
     */
    fiscalPeriod?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Journal Entry Category.
     * Maximum length: 1.
     * @nullable
     */
    accountingDocumentCategory?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Journal Entry Category Name.
     * Maximum length: 60.
     * @nullable
     */
    accountingDocumentCategoryName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Posting Date.
     * @nullable
     */
    postingDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Journal Entry Date.
     * @nullable
     */
    documentDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Journal Entry Type.
     * The document type classifies the accounting documents. It is stored in the document header.
     * Attributes that control the entry of the document, or which are themselves noted in the document, are defined for each document type. In particular, the number range assigned to the associated documents is defined on the basis of the document type.
     * Maximum length: 2.
     * @nullable
     */
    accountingDocumentType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Document Type Name.
     * Description of the business transaction which is posted using this document type.
     * Maximum length: 20.
     * @nullable
     */
    accountingDocumentTypeName?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Due Date for Net Payment.
     * The due date for net payment is calculated from the baseline date for payment and the maximum permissible target dates in the terms of payment. It is not stored in the document line item but is always recalculated during ABAP evaluations via logical data bases (on the basis of the current terms of payment) and displayed in this field.
     * @nullable
     */
    netDueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Due Date for Cash Discount 1.
     * @nullable
     */
    cashDiscount1DueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Cash Discount 2 Due Date.
     * @nullable
     */
    cashDiscount2DueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Offsetting Account.
     * Maximum length: 10.
     * @nullable
     */
    offsettingAccount?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Offsetting Account Type.
     * Maximum length: 1.
     * @nullable
     */
    offsettingAccountType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Partner Fund.
     * Unique key which identifies a fund.
     * If you assign budget to a fund, you can execute a detailed proof of origin for your funds.
     * Maximum length: 10.
     * @nullable
     */
    partnerFund?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Partner Grant.
     * Maximum length: 20.
     * @nullable
     */
    partnerGrant?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Budget Period.
     * Time frame of available budget authority.
     * During the budget period, the organization may commit, obligate, and encumber funds (terminology varies). After it, the organization may only post follow-on documents.The budget period always works together with the fund account assignment element in Funds Management (FM).Budget Period A: 2000-2010Budget Period B: 2005-2015The actuals and commitments recorded then are differentiated by the period of time on which authority was granted to a particular fund.Fund F1 Budget Period: AFund F2 Budget Period: AFund F2 Budget Period: B.
     * Maximum length: 10.
     * @nullable
     */
    budgetPeriod?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * FM: Partner Budget Period.
     * Time frame of available budget authority.
     * During the budget period, the organization may commit, obligate, and encumber funds (terminology varies). After it, the organization may only post follow-on documents.The budget period always works together with the fund account assignment element in Funds Management (FM).Budget Period A: 2000-2010Budget Period B: 2005-2015The actuals and commitments recorded then are differentiated by the period of time on which authority was granted to a particular fund.Fund F1 Budget Period: AFund F2 Budget Period: AFund F2 Budget Period: BWhen operations are performed with the fund and the budget, the partner fields help you track the proof of origin for your funds.
     * Maximum length: 10.
     * @nullable
     */
    partnerBudgetPeriod?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Branch Code.
     * Indicates a unique code (4-digit or 5-digit) that identifies a specific financial institution in Thailand from which the customer or the vendor can claim input VAT or output VAT respectively.
     * The system displays this code at the time of posting sales order, MM invoice, or FI invoice. Companies not registered with the Revenue Department, must enter the text NVAT in this field.If you enter 0000 or 00000, the system considers this to be the head office of the company. The Advance Return for Tax on Sales/Purchases (RFUMSV00) report reads this value and prints the text Head Office in the Head Office Number field in the list output. If you enter any other value, the RFUMSV00 report prints it in the Branch Office Number field in the list output.If the company is not registered with the Revenue Department, the Head Office Number and the Branch Office Number fields are not filled.The J_1HKORD print program also displays this branch code in the PDF output or script output.
     * Maximum length: 5.
     * @nullable
     */
    branchCode?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Company Code Currency.
     * Maximum length: 5.
     * @nullable
     */
    companyCodeCurrency?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Amount in Company Code Currency.
     * @nullable
     */
    amountInCompanyCodeCurrency?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Signed Tax Amount in Company Code Currency.
     * @nullable
     */
    taxAmountInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Tax Base Amount in Company Code Currency.
     * This field contains the amount for which tax is to be calculated. The amount is taken to be in the local currency of the company code.
     * With the direct entry of tax line items, you must always specify the base amount so that the system can check the tax amount. For postings in foreign currency, specifying the amount in foreign currency is sufficient. The local currency amount contained in this field is determined using translation.
     * @nullable
     */
    taxBaseAmountInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Valuation Difference Amount In Company Code Currency.
     * @nullable
     */
    valuationDiffAmtInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Cash Discount Amount in Company Code Currency.
     * @nullable
     */
    cashDiscountAmtInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Invoice Amount in Company Code Currency.
     * @nullable
     */
    invoiceAmtInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Transaction Currency.
     * Maximum length: 5.
     * @nullable
     */
    transactionCurrency?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Amount in Transaction Currency.
     * @nullable
     */
    amountInTransactionCurrency?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Original Tax Base Amount in Transaction Currency.
     * Original amount of the line item in document currency.
     * The amount deviates from the actual amount of the line item by automatically determined revised amounts.This is the case, for example, withnet document types for which cash discount deductions are calculatednon-deductible portions, such as for non-deductible input taxportions of the offsetting entry for additional taxes which can be distributed to expense items.
     * @nullable
     */
    originalTaxBaseAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Tax Amount in Transaction Currency.
     * Taxes on sales/purchases amount in document currency.
     * The amount serves, together with other values such as the  tax code and the tax base amount, as a basis for the automatically created postings for taxes on sales/purchases and therefore also as a base for the advance return for tax on sales/purchases.During document entry, you specify the tax amount providing it is known. If the tax is distributed between several line items with the same tax code, you can specify the total tax amount for one of these line items.In the case of down payments however, (contrary to this rule) you specify the corresponding tax portion per line item.If only the tax code and not the tax amount is known, you can select 'Calculate tax' for the first item. The tax amount is then calculated by the system.
     * @nullable
     */
    taxAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Tax Base Amount in Transaction Currency.
     * This field contains the amount on which the tax is to be calculated. The amount is taken to be in the document currency.
     * When directly entering tax items, you always have to specify the base amount so that the system can check that the tax amount is correct.
     * @nullable
     */
    taxBaseAmountInTransCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Withholding Tax Base Amount.
     * @nullable
     */
    withholdingTaxBaseAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Planned Amount in Transaction Currency.
     * @nullable
     */
    plannedAmtInTransactionCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Cash Discount Base Amount.
     * @nullable
     */
    cashDiscountBaseAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Cash Discount Amount.
     * @nullable
     */
    cashDiscountAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Net Payment Amount.
     * @nullable
     */
    netPaymentAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Withholding Tax Amount.
     * @nullable
     */
    withholdingTaxAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Withholding Tax-Exemption Amount.
     * @nullable
     */
    withholdingTaxExemptionAmt?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Invoice Amount in Foreign Currency.
     * @nullable
     */
    invoiceAmountInFrgnCurrency?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Balance Transaction Currency.
     * Maximum length: 5.
     * @nullable
     */
    balanceTransactionCurrency?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Amount in Balance Transaction Currency.
     * @nullable
     */
    amountInBalanceTransacCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Additional Currency 1.
     * Maximum length: 5.
     * @nullable
     */
    additionalCurrency1?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Valuation Difference Amount in Additional Currency 1.
     * @nullable
     */
    valuationDiffAmtInAddlCrcy1?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Amount in Additional Currency 1.
     * @nullable
     */
    amountInAdditionalCurrency1?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Additional Currency 2.
     * Maximum length: 5.
     * @nullable
     */
    additionalCurrency2?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Amount in Additional Currency 2.
     * @nullable
     */
    amountInAdditionalCurrency2?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Valuation Difference Amount in Additional Currency 2.
     * @nullable
     */
    valuationDiffAmtInAddlCrcy2?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Currency for Automatic Payment.
     * Maximum length: 5.
     * @nullable
     */
    paymentCurrency?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Amount in Payment Currency.
     * @nullable
     */
    amountInPaymentCurrency?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Credit Control Area Currency.
     * Maximum length: 5.
     * @nullable
     */
    creditControlAreaCurrency?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Credit Management: Hedged Amount.
     * @nullable
     */
    hedgedAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Base Unit of Measure.
     * Unit of measure in which stocks of the material are managed. The system converts all the quantities you enter in other units of measure (alternative units of measure) to the base unit of measure.
     * You define the base unit of measure and also alternative units of measure and their conversion factors in the material master record.Since all data is updated in the base unit of measure, your entry is particularly important for the conversion of alternative units of measure. A quantity in the alternative unit of measure can only be shown precisely if its value can be shown with the decimal places available. To ensure this, please note the following:The base unit of measure is the unit satisfying the highest necessary requirement for precision.The conversion of alternative units of measure to the base unit should result in simple decimal fractions (not, for example, 1/3 = 0.333...).Inventory ManagementIn Inventory Management, the base unit of measure is the same as the stockkeeping unit.ServicesServices have units of measure of their own, including the following:Service unitUnit of measure at the higher item level. The precise quantities of the individual services are each at the detailed service line level.BlanketUnit of measure at service line level for services to be provided once only, and for which no precise quantities can or are to be specified.
     * Maximum length: 3.
     * @nullable
     */
    baseUnit?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Quantity.
     * @nullable
     */
    quantity?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Unit of entry.
     * Specifies the unit of measure in which the goods movement or inventory count is entered.
     * Enter a unit of measure here only if it differs from the default unit of measure.There are the following default units of measure:the order unit for goods receipts with reference to purchase ordersthe production unit for goods receipts with reference to production ordersthe unit of issue for other goods movementsIf the default unit of measure has not been defined in the material master record, the system will suggest the stockkeeping unit.
     * Maximum length: 3.
     * @nullable
     */
    goodsMovementEntryUnit?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Quantity in Entry Unit of Measure.
     * @nullable
     */
    quantityInEntryUnit?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Order Price Unit (Purchasing).
     * Indicates the unit of measure to which the purchase order price relates.
     * 100 pc are ordered at a price of 10 $/kg. The order unit is "pc" (piece), and the purchase order price unit is "kg" (kilogram).
     * Maximum length: 3.
     * @nullable
     */
    purchasingDocumentPriceUnit?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Purchase Order Quantity.
     * @nullable
     */
    purchaseOrderQty?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Price unit.
     * Number of units to which the price refers.
     * If 10 gallons of gasoline cost $12.00, the price unit is 10.
     * @nullable
     */
    materialPriceUnitQty?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Number of Items.
     * @nullable
     */
    numberOfItems?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Accounting Document Entry Date.
     * Specifies the date on which the accounting document is entered.
     * NoteThe posting date can differ from the entry date (date of entry in the system) and the document date.
     * @nullable
     */
    accountingDocumentCreationDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Creation Time.
     * @nullable
     */
    creationTime?: DeserializedType<T, 'Edm.Time'> | null;
    /**
     * Last Change Date.
     * @nullable
     */
    lastChangeDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Exchange Rate Date.
     * @nullable
     */
    exchangeRateDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * User that created the journal entry.
     * Maximum length: 12.
     * @nullable
     */
    accountingDocCreatedByUser?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Transaction Code.
     * A combination of alphabetical and numerical characters forming a code for a business task.
     * Maximum length: 20.
     * @nullable
     */
    transactionCode?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Intercompany Transaction Number.
     * Maximum length: 16.
     * @nullable
     */
    intercompanyTransaction?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Document Reference ID.
     * Maximum length: 16.
     * @nullable
     */
    documentReferenceId?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Recurring Journal Entry.
     * Identifies the recurring journal order.
     * Maximum length: 10.
     * @nullable
     */
    recurringAccountingDocument?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Reverse Document.
     * Maximum length: 10.
     * @nullable
     */
    reverseDocument?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Reverse Document Fiscal Year.
     * Maximum length: 4.
     * @nullable
     */
    reverseDocumentFiscalYear?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Document Header Text.
     * The document header text contains explanations or notes which apply to the document as a whole, that is, not only for certain line items.
     * Maximum length: 25.
     * @nullable
     */
    accountingDocumentHeaderText?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Exchange Rate.
     * Rate used by the system for the translation of amounts into another currency.
     * Your system is configured in such a way that it expects:No prefix (leading sign) for direct ratesA "" as prefix (leading sign) for direct ratesNo prefix for indirect ratesA "" as prefix for indirect rates.
     * @nullable
     */
    exchangeRate?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Business Transaction Type.
     * Type of a business transaction that leads to a journal entry.
     * A business transaction is a business event that represents a change in a certain value or quantity for a company and, as a result, needs to be entered in accounting.
     * Maximum length: 4.
     * @nullable
     */
    businessTransactionType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Batch Input Session.
     * Maximum length: 12.
     * @nullable
     */
    batchInputSession?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Financial Management Area.
     * Key identifying an FM area.
     * An FM area is an organizational unit which plans, controls and monitors funds and commitment budgets.
     * Maximum length: 4.
     * @nullable
     */
    financialManagementArea?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Indicator: Reversal Is Planned for Document.
     * @nullable
     */
    reversalIsPlanned?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Planned Date for the Reversal Posting.
     * Date on which the reverse posting is to be made.
     * @nullable
     */
    plannedReversalDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Tax Is Automatically Calculated.
     * If you select this field, the system calculates the taxes automatically during simulation or posting.
     * @nullable
     */
    taxIsCalculatedAutomatically?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Tax Base Amount is Net Amount.
     * Indicator that causes the base amount for the calculation of sales tax to be reduced by the discount share.
     * The rule used to determine the base amount for the calculation of sales tax is subject to the relevant country legislation. Either the company code table or the jurisdiction code table is used for control purposes.If the jurisdiction code is used for tax calculation, the entries in the company code table are not valid. Control then takes place at the highest level of the definition of the jurisdiction code. This method of tax calculation is used in America, for example.In Great Britain, the base amount for sales tax is the invoice amount less the agreed discount.If the tax base amount is net, the net value also has to be chosen as the discount base.Exception: If tax is calculated using the jurisdiction code (USA), the combination 'Net tax base' and 'Gross discount base' is also permitted, however, no tax adjustment is made for payment with a discount deduction.In the following an example is given for each possible combination. In each case, the material value is 100.00, the possible discount percentage 3.00 %, and the tax percentage 10.00 %.1) Gross tax base, Gross discount baseTax base 100.00       ==> Tax amount   10.00Possible discount amount (3.00 % of 110.00)   3.30Invoice amount 110.002) Gross tax base, Net discount baseTax base 100.00       ==> Tax amount   10.00Possible discount amount (3.00 % of 100.00)   3.00Invoice amount 110.003) Net tax base,  Net discount baseTax base  97.00       ==> Tax amount    9.70(Tax base = Value of goods - Possible discount = 100.00 - 3.00)Possible discount amount (3.00 % of 100.00)   3.00Invoice amount 109.704) Extremely rare case (only permitted when jurisdiction code is used)Net tax base,  Gross discount baseThe value of the goods is not 100 but 100.30 so that the figures in this case can be compared to those in the other cases.Tax bases  97.00       ==> Tax amount   9.70(Net value of goods + Tax = 97.00 + 9.70 = 106.70)Since the discount base is gross, this value represents 97%    of the gross invoice amount.Invoice amount = 110.00Possible discount amount (3.00% of 110.00)    3.30.
     * @nullable
     */
    taxBaseAmountIsNetAmount?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Source Company Code.
     * Maximum length: 4.
     * @nullable
     */
    sourceCompanyCode?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Logical System.
     * System in which integrated applications are running on a common data basis.
     * The distribution of data between systems requires that each system in the network has a unique identification.  Logical systems are used for this purpose.In SAP terms, the client refers to a logical system. You can specify which logical system is a client in the Client Maintenance  (choose Goto -> Details).The logical system is relevant for the following SAP areas:ALE general: Communication takes place between two or more logical systems.ALE Business Processes (for example, Cost Center Accounting): Definition of the system in which a given application runs. Changes such as those to master data can only be made in this system.Workflow objects: The key of a workflow object always contains the logical system in which the object is located.When defining the logical system keep in mind the following:The logical system must be unique enterprise-wide. It must not be used by any other system in the ALE System group.The logical system must not be changed in the production system. If the logical system of a document reference is not set to initial and does not match your own, the system assumes that the document must be located on another system.
     * Maximum length: 10.
     * @nullable
     */
    logicalSystem?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Tax Exchange Rate.
     * The exchange rate which is used for translating the tax amounts is stored here. It is only filled if the option of making a direct entry was specified within company code customizing or the posting date or document date is to be used for the translation. The exchange rate can currently only be entered on the separate tax screen.
     * @nullable
     */
    taxExchangeRate?: DeserializedType<T, 'Edm.Decimal'> | null;
    /**
     * Reason for Reversal.
     * Reason for reversing a document.
     * Maximum length: 2.
     * @nullable
     */
    reversalReason?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Branch.
     * Maximum length: 4.
     * @nullable
     */
    branch?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Internal ID of Reference Key 1 in Document Header.
     * Maximum length: 20.
     * @nullable
     */
    reference1InDocumentHeader?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Internal ID of Reference Key 2 in Document Header.
     * Maximum length: 20.
     * @nullable
     */
    reference2InDocumentHeader?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Invoice Receipt Date.
     * Specifies the date on which the invoice was received.
     * @nullable
     */
    invoiceReceiptDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Ledger.
     * Maximum length: 2.
     * @nullable
     */
    ledger?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Ledger Group.
     * Uniquely identifies a ledger group.
     * If you do not specify a ledger group, the function (such as posting) is executed for all ledgers, that is, for the leading ledger and all ledgers assigned in the company code.The initial (empty) ledger group is a special ledger group that contains all ledgers that were defined within the same company code. The balance of the accounts within this ledger group is always the same as the balance of the open items.If you specify a ledger group here, the function is only executed for the ledgers belonging to this ledger group.
     * Maximum length: 4.
     * @nullable
     */
    ledgerGroup?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Alternative Reference Document.
     * Maximum length: 26.
     * @nullable
     */
    alternativeReferenceDocument?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Tax Reporting Date.
     * Date on which the tax on sales and purchases is due, or the date on which that tax must be reported to the tax authority.
     * The tax reporting date can be identical to the posting date or the document date; you also can define your own rules to determine the date.Tax ReportingThe tax reporting date is used in tax reporting primarily as a selection criterion, in addition to the posting date or document date.The tax reporting date is contained as a selection criterion in the logical database BRF.The field is available by default in the selection screens of several programs (for example, RFUMSV00, RFUMSV10, RDASLM00 , RFASLD02, RFASLD20). In the other report programs based on logical database BRF, the selection screens do not contain the field by default, but you can choose it from the custom selections.Exchange Rate Determination in Currency Translation of the Tax AmountYou also can use the tax reporting date to determine the exchange rate when performing currency translation of the tax amount. To do this, in Customizing for Tax on Sales/Purchases under Change Foreign Currency Translation choose the option Determine exchange rate based on tax reporting date. Even if you have selected this option, you can change the reporting date in the document for reporting purposes at a later date. The tax amount is not recalculated again if you do this.More InformationFor more information, see SAP Note 1232484 and the related notes.The tax reporting date is a field in the document header (table BKPF) and therefore applies to the entire document.To be able to use the field in documents, you need to activate the function Inventory-managing Customizing of Global Parameters for the company code. To do this, go to Enter Global Parameters and set Tax Reporting Date Active.If you have not selected Tax Reporting Date Active or the document is not tax relevant (does not contain a tax code), the system stores the tax reporting date with an initialized value.When entering documents, you can enter the tax reporting date in the dialog box for taxes. The BAdI Define and Check Tax Reporting Date (VATDATE_VALUES) proposes a value for this date. In the standard implementation, this is the posting date or, alternatively, the document date. You can change this date in the transaction for changing documents (FB02). But first you need to allow for the date to be changed in Customizing for Document Change Rules under Document Change Rules, Document Header. You can use the BAdI VATDATE_VALUES to verify the changes to the tax reporting date in the document.You can use the BAdI Determine Exchange Rate for Tax Items (BADI_TAX_EXCHANGE_RATE) to determine which exchange rate is relevant for tax line items in documents.
     * @nullable
     */
    taxReportingDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    /**
     * Accounting Document Class.
     * Maximum length: 6.
     * @nullable
     */
    accountingDocumentClass?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Exchange Rate Type.
     * Key representing a type of exchange rate in the system.
     * You enter the exchange rate type to store different exchange rates.You can use the exchange rate type to define a buying rate, selling rate, or average rate for translating foreign currency amounts. You can use the average rate for the currency translation, and the bank buying and selling rates for valuation of foreign currency amounts.
     * Maximum length: 4.
     * @nullable
     */
    exchangeRateType?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Late Payment Reason.
     * Maximum length: 2.
     * @nullable
     */
    latePaymentReason?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Sales Document Condition.
     * The internal number under which the system saves conditions that apply to a sales order, for example.
     * The purchasing and sales departments may want to use the same order number for a document even though different conditions may apply in each area. The system uses the internal number to identify the different conditions.
     * Maximum length: 10.
     * @nullable
     */
    salesDocumentCondition?: DeserializedType<T, 'Edm.String'> | null;
    /**
     * Indicator: Item is reversing another item.
     * @nullable
     */
    isReversal?: DeserializedType<T, 'Edm.Boolean'> | null;
    /**
     * Indicator: Item is reversed.
     * @nullable
     */
    isReversed?: DeserializedType<T, 'Edm.Boolean'> | null;
}
export interface OperationalAcctgDocItemCubeType<T extends DeSerializers = DefaultDeSerializers> {
    companyCode: DeserializedType<T, 'Edm.String'>;
    fiscalYear: DeserializedType<T, 'Edm.String'>;
    accountingDocument: DeserializedType<T, 'Edm.String'>;
    accountingDocumentItem: DeserializedType<T, 'Edm.String'>;
    companyCodeName?: DeserializedType<T, 'Edm.String'> | null;
    chartOfAccounts?: DeserializedType<T, 'Edm.String'> | null;
    accountingDocumentItemType?: DeserializedType<T, 'Edm.String'> | null;
    clearingDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    clearingCreationDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    clearingAccountingDocument?: DeserializedType<T, 'Edm.String'> | null;
    isCleared?: DeserializedType<T, 'Edm.Boolean'> | null;
    postingKey?: DeserializedType<T, 'Edm.String'> | null;
    financialAccountType?: DeserializedType<T, 'Edm.String'> | null;
    specialGlCode?: DeserializedType<T, 'Edm.String'> | null;
    specialGlTransactionType?: DeserializedType<T, 'Edm.String'> | null;
    debitCreditCode?: DeserializedType<T, 'Edm.String'> | null;
    businessArea?: DeserializedType<T, 'Edm.String'> | null;
    businessAreaName?: DeserializedType<T, 'Edm.String'> | null;
    partnerBusinessArea?: DeserializedType<T, 'Edm.String'> | null;
    taxCode?: DeserializedType<T, 'Edm.String'> | null;
    withholdingTaxCode?: DeserializedType<T, 'Edm.String'> | null;
    taxType?: DeserializedType<T, 'Edm.String'> | null;
    transactionTypeDetermination?: DeserializedType<T, 'Edm.String'> | null;
    valueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    assignmentReference?: DeserializedType<T, 'Edm.String'> | null;
    documentItemText?: DeserializedType<T, 'Edm.String'> | null;
    partnerCompany?: DeserializedType<T, 'Edm.String'> | null;
    financialTransactionType?: DeserializedType<T, 'Edm.String'> | null;
    corporateGroupAccount?: DeserializedType<T, 'Edm.String'> | null;
    planningLevel?: DeserializedType<T, 'Edm.String'> | null;
    controllingArea?: DeserializedType<T, 'Edm.String'> | null;
    controllingAreaName?: DeserializedType<T, 'Edm.String'> | null;
    costCenter?: DeserializedType<T, 'Edm.String'> | null;
    costCenterName?: DeserializedType<T, 'Edm.String'> | null;
    project?: DeserializedType<T, 'Edm.String'> | null;
    orderId?: DeserializedType<T, 'Edm.String'> | null;
    billingDocument?: DeserializedType<T, 'Edm.String'> | null;
    salesDocument?: DeserializedType<T, 'Edm.String'> | null;
    salesDocumentItem?: DeserializedType<T, 'Edm.String'> | null;
    scheduleLine?: DeserializedType<T, 'Edm.String'> | null;
    masterFixedAsset?: DeserializedType<T, 'Edm.String'> | null;
    fixedAsset?: DeserializedType<T, 'Edm.String'> | null;
    assetTransactionType?: DeserializedType<T, 'Edm.String'> | null;
    assetValueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    personnelNumber?: DeserializedType<T, 'Edm.String'> | null;
    isSalesRelated?: DeserializedType<T, 'Edm.Boolean'> | null;
    lineItemDisplayIsEnabled?: DeserializedType<T, 'Edm.Boolean'> | null;
    isOpenItemManaged?: DeserializedType<T, 'Edm.String'> | null;
    isNotCashDiscountLiable?: DeserializedType<T, 'Edm.Boolean'> | null;
    isAutomaticallyCreated?: DeserializedType<T, 'Edm.Boolean'> | null;
    isUsedInPaymentTransaction?: DeserializedType<T, 'Edm.Boolean'> | null;
    operationalGlAccount?: DeserializedType<T, 'Edm.String'> | null;
    glAccount?: DeserializedType<T, 'Edm.String'> | null;
    glAccountName?: DeserializedType<T, 'Edm.String'> | null;
    glAccountLongName?: DeserializedType<T, 'Edm.String'> | null;
    customer?: DeserializedType<T, 'Edm.String'> | null;
    customerName?: DeserializedType<T, 'Edm.String'> | null;
    supplier?: DeserializedType<T, 'Edm.String'> | null;
    supplierName?: DeserializedType<T, 'Edm.String'> | null;
    branchAccount?: DeserializedType<T, 'Edm.String'> | null;
    isBalanceSheetAccount?: DeserializedType<T, 'Edm.Boolean'> | null;
    profitLossAccountType?: DeserializedType<T, 'Edm.String'> | null;
    specialGlAccountAssignment?: DeserializedType<T, 'Edm.String'> | null;
    dueCalculationBaseDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    paymentTerms?: DeserializedType<T, 'Edm.String'> | null;
    cashDiscount1Days?: DeserializedType<T, 'Edm.Decimal'> | null;
    cashDiscount2Days?: DeserializedType<T, 'Edm.Decimal'> | null;
    netPaymentDays?: DeserializedType<T, 'Edm.Decimal'> | null;
    cashDiscount1Percent?: DeserializedType<T, 'Edm.Decimal'> | null;
    cashDiscount2Percent?: DeserializedType<T, 'Edm.Decimal'> | null;
    paymentMethod?: DeserializedType<T, 'Edm.String'> | null;
    paymentBlockingReason?: DeserializedType<T, 'Edm.String'> | null;
    fixedCashDiscount?: DeserializedType<T, 'Edm.String'> | null;
    houseBank?: DeserializedType<T, 'Edm.String'> | null;
    bpBankAccountInternalId?: DeserializedType<T, 'Edm.String'> | null;
    taxDistributionCode1?: DeserializedType<T, 'Edm.String'> | null;
    taxDistributionCode2?: DeserializedType<T, 'Edm.String'> | null;
    taxDistributionCode3?: DeserializedType<T, 'Edm.String'> | null;
    invoiceReference?: DeserializedType<T, 'Edm.String'> | null;
    invoiceReferenceFiscalYear?: DeserializedType<T, 'Edm.String'> | null;
    invoiceItemReference?: DeserializedType<T, 'Edm.String'> | null;
    followOnDocumentType?: DeserializedType<T, 'Edm.String'> | null;
    stateCentralBankPaymentReason?: DeserializedType<T, 'Edm.String'> | null;
    supplyingCountry?: DeserializedType<T, 'Edm.String'> | null;
    invoiceList?: DeserializedType<T, 'Edm.String'> | null;
    billOfExchangeUsage?: DeserializedType<T, 'Edm.String'> | null;
    dunningKey?: DeserializedType<T, 'Edm.String'> | null;
    dunningBlockingReason?: DeserializedType<T, 'Edm.String'> | null;
    lastDunningDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    dunningLevel?: DeserializedType<T, 'Edm.String'> | null;
    dunningArea?: DeserializedType<T, 'Edm.String'> | null;
    withholdingTaxCertificate?: DeserializedType<T, 'Edm.String'> | null;
    material?: DeserializedType<T, 'Edm.String'> | null;
    product?: DeserializedType<T, 'Edm.String'> | null;
    plant?: DeserializedType<T, 'Edm.String'> | null;
    purchasingDocument?: DeserializedType<T, 'Edm.String'> | null;
    purchasingDocumentItem?: DeserializedType<T, 'Edm.String'> | null;
    accountAssignmentNumber?: DeserializedType<T, 'Edm.String'> | null;
    isCompletelyDelivered?: DeserializedType<T, 'Edm.Boolean'> | null;
    materialPriceControl?: DeserializedType<T, 'Edm.String'> | null;
    valuationArea?: DeserializedType<T, 'Edm.String'> | null;
    inventoryValuationType?: DeserializedType<T, 'Edm.String'> | null;
    vatRegistration?: DeserializedType<T, 'Edm.String'> | null;
    delivOfGoodsDestCountry?: DeserializedType<T, 'Edm.String'> | null;
    paymentDifferenceReason?: DeserializedType<T, 'Edm.String'> | null;
    profitCenter?: DeserializedType<T, 'Edm.String'> | null;
    profitCenterName?: DeserializedType<T, 'Edm.String'> | null;
    jointVenture?: DeserializedType<T, 'Edm.String'> | null;
    jointVentureCostRecoveryCode?: DeserializedType<T, 'Edm.String'> | null;
    jointVentureEquityGroup?: DeserializedType<T, 'Edm.String'> | null;
    treasuryContractType?: DeserializedType<T, 'Edm.String'> | null;
    assetContract?: DeserializedType<T, 'Edm.String'> | null;
    cashFlowType?: DeserializedType<T, 'Edm.String'> | null;
    taxJurisdiction?: DeserializedType<T, 'Edm.String'> | null;
    realEstateObject?: DeserializedType<T, 'Edm.String'> | null;
    settlementReferenceDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    commitmentItem?: DeserializedType<T, 'Edm.String'> | null;
    costObject?: DeserializedType<T, 'Edm.String'> | null;
    projectNetwork?: DeserializedType<T, 'Edm.String'> | null;
    orderInternalBillOfOperations?: DeserializedType<T, 'Edm.String'> | null;
    orderIntBillOfOperationsItem?: DeserializedType<T, 'Edm.String'> | null;
    wbsElementInternalId?: DeserializedType<T, 'Edm.String'> | null;
    profitabilitySegment?: DeserializedType<T, 'Edm.String'> | null;
    jointVentureEquityType?: DeserializedType<T, 'Edm.String'> | null;
    isEuTriangularDeal?: DeserializedType<T, 'Edm.Boolean'> | null;
    costOriginGroup?: DeserializedType<T, 'Edm.String'> | null;
    companyCodeCurrencyDetnMethod?: DeserializedType<T, 'Edm.String'> | null;
    clearingIsReversed?: DeserializedType<T, 'Edm.Boolean'> | null;
    paymentMethodSupplement?: DeserializedType<T, 'Edm.String'> | null;
    alternativeGlAccount?: DeserializedType<T, 'Edm.String'> | null;
    fundsCenter?: DeserializedType<T, 'Edm.String'> | null;
    fund?: DeserializedType<T, 'Edm.String'> | null;
    partnerProfitCenter?: DeserializedType<T, 'Edm.String'> | null;
    reference1IdByBusinessPartner?: DeserializedType<T, 'Edm.String'> | null;
    reference2IdByBusinessPartner?: DeserializedType<T, 'Edm.String'> | null;
    isNegativePosting?: DeserializedType<T, 'Edm.Boolean'> | null;
    paymentCardItem?: DeserializedType<T, 'Edm.String'> | null;
    paymentCardPaymentSettlement?: DeserializedType<T, 'Edm.String'> | null;
    creditControlArea?: DeserializedType<T, 'Edm.String'> | null;
    reference3IdByBusinessPartner?: DeserializedType<T, 'Edm.String'> | null;
    dataExchangeInstruction1?: DeserializedType<T, 'Edm.String'> | null;
    dataExchangeInstruction2?: DeserializedType<T, 'Edm.String'> | null;
    dataExchangeInstruction3?: DeserializedType<T, 'Edm.String'> | null;
    dataExchangeInstruction4?: DeserializedType<T, 'Edm.String'> | null;
    region?: DeserializedType<T, 'Edm.String'> | null;
    hasPaymentOrder?: DeserializedType<T, 'Edm.Boolean'> | null;
    paymentReference?: DeserializedType<T, 'Edm.String'> | null;
    taxDeterminationDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    clearingItem?: DeserializedType<T, 'Edm.Decimal'> | null;
    businessPlace?: DeserializedType<T, 'Edm.String'> | null;
    taxSection?: DeserializedType<T, 'Edm.String'> | null;
    costCtrActivityType?: DeserializedType<T, 'Edm.String'> | null;
    accountsReceivableIsPledged?: DeserializedType<T, 'Edm.String'> | null;
    businessProcess?: DeserializedType<T, 'Edm.String'> | null;
    grantId?: DeserializedType<T, 'Edm.String'> | null;
    functionalArea?: DeserializedType<T, 'Edm.String'> | null;
    functionalAreaName?: DeserializedType<T, 'Edm.String'> | null;
    customerIsInExecution?: DeserializedType<T, 'Edm.Boolean'> | null;
    fundedProgram?: DeserializedType<T, 'Edm.String'> | null;
    clearingDocFiscalYear?: DeserializedType<T, 'Edm.String'> | null;
    ledgerGlLineItem?: DeserializedType<T, 'Edm.String'> | null;
    segment?: DeserializedType<T, 'Edm.String'> | null;
    segmentName?: DeserializedType<T, 'Edm.String'> | null;
    partnerSegment?: DeserializedType<T, 'Edm.String'> | null;
    partnerFunctionalArea?: DeserializedType<T, 'Edm.String'> | null;
    houseBankAccount?: DeserializedType<T, 'Edm.String'> | null;
    costElement?: DeserializedType<T, 'Edm.String'> | null;
    sepaMandate?: DeserializedType<T, 'Edm.String'> | null;
    referenceDocumentType?: DeserializedType<T, 'Edm.String'> | null;
    originalReferenceDocument?: DeserializedType<T, 'Edm.String'> | null;
    referenceDocumentLogicalSystem?: DeserializedType<T, 'Edm.String'> | null;
    accountingDocumentItemRef?: DeserializedType<T, 'Edm.String'> | null;
    fiscalPeriod?: DeserializedType<T, 'Edm.String'> | null;
    accountingDocumentCategory?: DeserializedType<T, 'Edm.String'> | null;
    accountingDocumentCategoryName?: DeserializedType<T, 'Edm.String'> | null;
    postingDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    documentDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    accountingDocumentType?: DeserializedType<T, 'Edm.String'> | null;
    accountingDocumentTypeName?: DeserializedType<T, 'Edm.String'> | null;
    netDueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    cashDiscount1DueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    cashDiscount2DueDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    offsettingAccount?: DeserializedType<T, 'Edm.String'> | null;
    offsettingAccountType?: DeserializedType<T, 'Edm.String'> | null;
    partnerFund?: DeserializedType<T, 'Edm.String'> | null;
    partnerGrant?: DeserializedType<T, 'Edm.String'> | null;
    budgetPeriod?: DeserializedType<T, 'Edm.String'> | null;
    partnerBudgetPeriod?: DeserializedType<T, 'Edm.String'> | null;
    branchCode?: DeserializedType<T, 'Edm.String'> | null;
    companyCodeCurrency?: DeserializedType<T, 'Edm.String'> | null;
    amountInCompanyCodeCurrency?: DeserializedType<T, 'Edm.Decimal'> | null;
    taxAmountInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    taxBaseAmountInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    valuationDiffAmtInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    cashDiscountAmtInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    invoiceAmtInCoCodeCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    transactionCurrency?: DeserializedType<T, 'Edm.String'> | null;
    amountInTransactionCurrency?: DeserializedType<T, 'Edm.Decimal'> | null;
    originalTaxBaseAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    taxAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    taxBaseAmountInTransCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    withholdingTaxBaseAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    plannedAmtInTransactionCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    cashDiscountBaseAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    cashDiscountAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    netPaymentAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    withholdingTaxAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    withholdingTaxExemptionAmt?: DeserializedType<T, 'Edm.Decimal'> | null;
    invoiceAmountInFrgnCurrency?: DeserializedType<T, 'Edm.Decimal'> | null;
    balanceTransactionCurrency?: DeserializedType<T, 'Edm.String'> | null;
    amountInBalanceTransacCrcy?: DeserializedType<T, 'Edm.Decimal'> | null;
    additionalCurrency1?: DeserializedType<T, 'Edm.String'> | null;
    valuationDiffAmtInAddlCrcy1?: DeserializedType<T, 'Edm.Decimal'> | null;
    amountInAdditionalCurrency1?: DeserializedType<T, 'Edm.Decimal'> | null;
    additionalCurrency2?: DeserializedType<T, 'Edm.String'> | null;
    amountInAdditionalCurrency2?: DeserializedType<T, 'Edm.Decimal'> | null;
    valuationDiffAmtInAddlCrcy2?: DeserializedType<T, 'Edm.Decimal'> | null;
    paymentCurrency?: DeserializedType<T, 'Edm.String'> | null;
    amountInPaymentCurrency?: DeserializedType<T, 'Edm.Decimal'> | null;
    creditControlAreaCurrency?: DeserializedType<T, 'Edm.String'> | null;
    hedgedAmount?: DeserializedType<T, 'Edm.Decimal'> | null;
    baseUnit?: DeserializedType<T, 'Edm.String'> | null;
    quantity?: DeserializedType<T, 'Edm.Decimal'> | null;
    goodsMovementEntryUnit?: DeserializedType<T, 'Edm.String'> | null;
    quantityInEntryUnit?: DeserializedType<T, 'Edm.Decimal'> | null;
    purchasingDocumentPriceUnit?: DeserializedType<T, 'Edm.String'> | null;
    purchaseOrderQty?: DeserializedType<T, 'Edm.Decimal'> | null;
    materialPriceUnitQty?: DeserializedType<T, 'Edm.Decimal'> | null;
    numberOfItems?: DeserializedType<T, 'Edm.Decimal'> | null;
    accountingDocumentCreationDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    creationTime?: DeserializedType<T, 'Edm.Time'> | null;
    lastChangeDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    exchangeRateDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    accountingDocCreatedByUser?: DeserializedType<T, 'Edm.String'> | null;
    transactionCode?: DeserializedType<T, 'Edm.String'> | null;
    intercompanyTransaction?: DeserializedType<T, 'Edm.String'> | null;
    documentReferenceId?: DeserializedType<T, 'Edm.String'> | null;
    recurringAccountingDocument?: DeserializedType<T, 'Edm.String'> | null;
    reverseDocument?: DeserializedType<T, 'Edm.String'> | null;
    reverseDocumentFiscalYear?: DeserializedType<T, 'Edm.String'> | null;
    accountingDocumentHeaderText?: DeserializedType<T, 'Edm.String'> | null;
    exchangeRate?: DeserializedType<T, 'Edm.Decimal'> | null;
    businessTransactionType?: DeserializedType<T, 'Edm.String'> | null;
    batchInputSession?: DeserializedType<T, 'Edm.String'> | null;
    financialManagementArea?: DeserializedType<T, 'Edm.String'> | null;
    reversalIsPlanned?: DeserializedType<T, 'Edm.Boolean'> | null;
    plannedReversalDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    taxIsCalculatedAutomatically?: DeserializedType<T, 'Edm.Boolean'> | null;
    taxBaseAmountIsNetAmount?: DeserializedType<T, 'Edm.Boolean'> | null;
    sourceCompanyCode?: DeserializedType<T, 'Edm.String'> | null;
    logicalSystem?: DeserializedType<T, 'Edm.String'> | null;
    taxExchangeRate?: DeserializedType<T, 'Edm.Decimal'> | null;
    reversalReason?: DeserializedType<T, 'Edm.String'> | null;
    branch?: DeserializedType<T, 'Edm.String'> | null;
    reference1InDocumentHeader?: DeserializedType<T, 'Edm.String'> | null;
    reference2InDocumentHeader?: DeserializedType<T, 'Edm.String'> | null;
    invoiceReceiptDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    ledger?: DeserializedType<T, 'Edm.String'> | null;
    ledgerGroup?: DeserializedType<T, 'Edm.String'> | null;
    alternativeReferenceDocument?: DeserializedType<T, 'Edm.String'> | null;
    taxReportingDate?: DeserializedType<T, 'Edm.DateTime'> | null;
    accountingDocumentClass?: DeserializedType<T, 'Edm.String'> | null;
    exchangeRateType?: DeserializedType<T, 'Edm.String'> | null;
    latePaymentReason?: DeserializedType<T, 'Edm.String'> | null;
    salesDocumentCondition?: DeserializedType<T, 'Edm.String'> | null;
    isReversal?: DeserializedType<T, 'Edm.Boolean'> | null;
    isReversed?: DeserializedType<T, 'Edm.Boolean'> | null;
}
//# sourceMappingURL=OperationalAcctgDocItemCube.d.ts.map