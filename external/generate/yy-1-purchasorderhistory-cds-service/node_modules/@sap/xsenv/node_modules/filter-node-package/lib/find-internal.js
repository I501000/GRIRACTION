'use strict';

const readline = require('readline');
var diveSync = require('diveSync');
var fs = require('fs');
var path = require('path');
var util = require('util');
var constants = require('./constants');

var ignoreDirs = {
  '.git': true,
  'node_modules': true
};

module.exports = function findInternalContent(warnOnly) {
  function filter(fpath, dir) {
    if (dir) {
      var basename = path.basename(fpath);
      if (basename in ignoreDirs) {
        return false;
      }
    }
    return true;
  }
  var dir = process.cwd();
  console.log('Scanning for internal information...');
  diveSync(dir, { filter: filter, all: true }, function (err, file) {
    if (err) {
      console.error(err);
      return;
    }

    var matches = [];
    const rl = readline.createInterface({
      input: fs.createReadStream(file, { encoding: 'utf8' })
    });
    rl.on('line', (line) => {
      constants.internalKeywords.some(function (keyword) {
        return line.indexOf(keyword) >= 0;
      }) && matches.push(line.trim());
    }).on('close', () => {
      if (matches.length) {
        var message = util.format('%s contains internal information:', file);
        matches.forEach(element => {
          message += '\n\t-> ' + element;
        });
        if (warnOnly) {
          console.log('WARNING: %s', message);
        } else {
          process.exitCode = 1;
          console.error('ERROR: %s', message);
        }
      }
    });
  });
}
