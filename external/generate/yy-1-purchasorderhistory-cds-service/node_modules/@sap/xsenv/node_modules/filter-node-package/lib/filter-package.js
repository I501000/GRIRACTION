/**
 * Filter SAP-internal properties from package.json files
 *
 * Background:
 *   npm install writes SAP internal data (e.g. the SAP Nexus and GitHub URLs) into
 *   the package.json files of the installed modules. Before releasing such
 *   a self-contained package to customers, all package.json files have to be
 *   filtered to prevent information disclosure. Same holds for npm-shrinkwrap.json
 *   files, which contains SAP Nexus URLs after "npm shrinkwrap" was executed.
 *
 * Usage:
 *   node filter-package.js <intput file> [--verbose]
 *
 * Recursive in bash:
 *   find $PWD -name package.json -exec node <path>/filter-package.js {} \;
 */

'use strict';

var fs = require('fs');
var path = require('path');
var constants = require('./constants');
var filters = require('./filter-package-lock');

module.exports = filter;


if (require.main === module) {
  main();
}

/**
 * Main entry
 */
function main() {
  // Cmd line args
  if (process.argv.length < 3) {
    console.log("Usage: node filter-package.json <input file> [--verbose]");
    process.exit(1);
  }
  var inputfile = process.argv[2];
  var verbose = (process.argv.length > 3) && (process.argv[3] == "--verbose");

  filter(inputfile, {verbose: verbose});
}

/**
 * Filter the given input file by fixed keywords
 *
 * @param inputfile: name of the file to filter
 * @param options:   options passed to filter
 */
function filter(inputfile, options) {
  filterJsonFile(inputfile, constants.internalKeywords, options);
}

/**
 * Read contents of a file and filter it for keywords
 *
 * @param intputfile: name of the file to filter
 * @param keywords:   an array of keywords to filter
 * @param options:    options passed to filter
 */
function filterJsonFile(inputfile, keywords, options) {
  // Read input
  var verbose = options.verbose;
  verbose && console.log("Filtering file", inputfile);
  var inputJson = JSON.parse(fs.readFileSync(inputfile, 'utf8'));
  if (verbose) {
    console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
    console.log("Input JSON:");
    console.log(JSON.stringify(inputJson, null, 2));
  }

  filterObject(inputJson, keywords);
  var baseName = path.basename(inputfile);
  if (baseName === 'package-lock.json' || baseName === 'npm-shrinkwrap.json') {
    filters.filterPackageLock(inputJson, options);
    filters.filterDev(inputJson);
  }

  // Produce output
  var outputJsonString = JSON.stringify(inputJson, null, 2);
  if (verbose) {
    console.log("------------------------------");
    console.log("Filtered JSON:");
    console.log(outputJsonString);
    console.log("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
  }

  // Write to file
  if (verbose) {
    console.log("Writing back ", inputfile);
  }

  fs.writeFileSync(inputfile, outputJsonString);

  if (verbose) {
    console.log("Done");
  }
}

/**
 * Recursively filter all string properties from an object
 * that contain the substring 'sap.corp'
 *
 * @param obj:      the object to iterate and filter
 * @param keywords: an array of keywords to filter for
 */
function filterObject(obj, keywords) {
  for (var property in obj) {
    if (obj.hasOwnProperty(property)) {
      if (typeof obj[property] === 'string') {
        for (var keyword in keywords) {
          if (obj[property].toLowerCase().indexOf(keywords[keyword]) > -1) {
            delete obj[property];
            break;
          }
        }
      } else if (typeof obj[property] === 'object' && obj[property] !== null) {
        filterObject(obj[property], keywords);
      }
    }
  }
}
